
;  Copyright (c) 1991-2002, The Numerical Algorithms Group Ltd.
;  All rights reserved.
;  
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  
;      - Redistributions of source code must retain the above copyright
;        notice, this list of conditions and the following disclaimer.
;  
;      - Redistributions in binary form must reproduce the above copyright
;        notice, this list of conditions and the following disclaimer in
;        the documentation and/or other materials provided with the
;        distribution.
;  
;      - Neither the name of The Numerical ALgorithms Group Ltd. nor the
;        names of its contributors may be used to endorse or promote products
;        derived from this software without specific prior written permission.
;  
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES-- LOSS OF USE, DATA, OR
;  PROFITS-- OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(IN-PACKAGE (QUOTE BOOTTRAN))
(DEFUN |bfGenSymbol| NIL (PROG NIL (DECLARE (SPECIAL |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| (+ |$GenVarCounter| 1)) (INTERN (CONCAT "bfVar#" (STRINGIMAGE |$GenVarCounter|)))))))
(DEFUN |bfListOf| (|x|) (PROG NIL (RETURN |x|)))
(DEFUN |bfColon| (|x|) (PROG NIL (RETURN (LIST (QUOTE COLON) |x|))))
(DEFUN |bfSymbol| (|x|) (PROG NIL (RETURN (COND ((STRINGP |x|) |x|) ((QUOTE T) (LIST (QUOTE QUOTE) |x|))))))
(DEFUN |bfDot| NIL (PROG NIL (RETURN (QUOTE DOT))))
(DEFUN |bfSuffixDot| (|x|) (PROG NIL (RETURN (LIST |x| (QUOTE DOT)))))
(DEFUN |bfEqual| (|name|) (PROG NIL (RETURN (LIST (QUOTE EQUAL) |name|))))
(DEFUN |bfBracket| (|part|) (PROG NIL (RETURN |part|)))
(DEFUN |bfPile| (|part|) (PROG NIL (RETURN |part|)))
(DEFUN |bfAppend| (|x|) (PROG NIL (RETURN (APPLY (FUNCTION APPEND) |x|))))
(DEFUN |bfColonAppend| (|x| |y|) (PROG (|a|) (RETURN (COND ((NULL |x|) (COND ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE BVQUOTE)) (PROGN (SETQ |a| (CDR |y|)) (QUOTE T))) (LIST (QUOTE &REST) (CONS (QUOTE QUOTE) |a|))) (#0=(QUOTE T) (LIST (QUOTE &REST) |y|)))) (#0# (CONS (CAR |x|) (|bfColonAppend| (CDR |x|) |y|)))))))
(DEFUN |bfDefinition1| (|bflhsitems| |bfrhs|) (PROG NIL (RETURN (LIST (QUOTE DEF) |bflhsitems| (|bfTuple| NIL) |bfrhs|))))
(DEFUN |bfDefinition2| (|bflhsitems| |bfrhs| |body|) (PROG NIL (RETURN (LIST (QUOTE DEF) |bflhsitems| |bfrhs| |body|))))
(DEFUN |bfMDefinition2| (|bflhsitems| |bfrhs| |body|) (PROG NIL (RETURN (|bfMDef| (QUOTE MDEF) |bflhsitems| |bfrhs| |body|))))
(DEFUN |bfCompDef| (|bfVar#1|) (PROG (|body| |args| |op| |def|) (RETURN (PROGN (SETQ |def| (CAR |bfVar#1|)) (SETQ |op| (CADR . #0=(|bfVar#1|))) (SETQ |args| (CADDR . #0#)) (SETQ |body| (CADDDR . #0#)) (|bfDef| |def| |op| |args| |body|)))))
(DEFUN |bfBeginsDollar| (|x|) (PROG NIL (RETURN (EQL (ELT "$" 0) (ELT (PNAME |x|) 0)))))
(DEFUN |compFluid| (|id|) (PROG NIL (RETURN (LIST (QUOTE FLUID) |id|))))
(DEFUN |compFluidize| (|x|) (PROG NIL (RETURN (COND ((AND (IDENTP |x|) (|bfBeginsDollar| |x|)) (|compFluid| |x|)) ((ATOM |x|) |x|) ((EQCAR |x| (QUOTE QUOTE)) |x|) ((QUOTE T) (CONS (|compFluidize| (CAR |x|)) (|compFluidize| (CDR |x|))))))))
(DEFUN |bfTuple| (|x|) (PROG NIL (RETURN (CONS (QUOTE TUPLE) |x|))))
(DEFUN |bfTupleP| (|x|) (PROG NIL (RETURN (EQCAR |x| (QUOTE TUPLE)))))
(DEFUN |bfTupleIf| (|x|) (PROG NIL (RETURN (COND ((|bfTupleP| |x|) |x|) ((QUOTE T) (|bfTuple| |x|))))))
(DEFUN |bfTupleConstruct| (|b|) (PROG (|ISTMP#1| |a|) (RETURN (PROGN (SETQ |a| (COND ((|bfTupleP| |b|) (CDR |b|)) ((QUOTE T) (LIST |b|)))) (COND (((LAMBDA (|bfVar#3| |bfVar#2| |x|) (LOOP (COND ((OR (ATOM |bfVar#2|) (PROGN (SETQ |x| (CAR |bfVar#2|)) NIL)) (RETURN |bfVar#3|)) ((QUOTE T) (PROGN (SETQ |bfVar#3| (AND (CONSP |x|) (EQ (CAR |x|) (QUOTE COLON)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL))))) (COND (|bfVar#3| (RETURN |bfVar#3|)))))) (SETQ |bfVar#2| (CDR |bfVar#2|)))) NIL |a| NIL) (|bfMakeCons| |a|)) ((QUOTE T) (CONS (QUOTE LIST) |a|)))))))
(DEFUN |bfConstruct| (|b|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (COND ((|bfTupleP| |b|) (CDR |b|)) ((QUOTE T) (LIST |b|)))) (|bfMakeCons| |a|)))))
(DEFUN |bfMakeCons| (|l|) (PROG (|l1| |a| |ISTMP#2| |ISTMP#1|) (RETURN (COND ((NULL |l|) NIL) ((AND (CONSP |l|) (PROGN (SETQ |ISTMP#1| (CAR |l|)) (AND (CONSP |ISTMP#1|) (EQ (CAR |ISTMP#1|) (QUOTE COLON)) (PROGN (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#2|)) #0=(QUOTE T)))))) (PROGN (SETQ |l1| (CDR |l|)) #0#)) (COND (|l1| (LIST (QUOTE APPEND) |a| (|bfMakeCons| |l1|))) (#1=(QUOTE T) |a|))) (#1# (LIST (QUOTE CONS) (CAR |l|) (|bfMakeCons| (CDR |l|))))))))
(DEFUN |bfFor| (|bflhs| U |step|) (PROG NIL (RETURN (COND ((EQCAR U (QUOTE |tails|)) (|bfForTree| (QUOTE ON) |bflhs| (CADR U))) ((EQCAR U (QUOTE SEGMENT)) (|bfSTEP| |bflhs| (CADR U) |step| (CADDR U))) ((QUOTE T) (|bfForTree| (QUOTE IN) |bflhs| U))))))
(DEFUN |bfForTree| (OP |lhs| |whole|) (PROG (G) (RETURN (PROGN (SETQ |whole| (COND ((|bfTupleP| |whole|) (|bfMakeCons| (CDR |whole|))) (#0=(QUOTE T) |whole|))) (COND ((ATOM |lhs|) (|bfINON| (LIST OP |lhs| |whole|))) (#1=(QUOTE T) (PROGN (SETQ |lhs| (COND ((|bfTupleP| |lhs|) (CADR |lhs|)) (#0# |lhs|))) (COND ((EQCAR |lhs| (QUOTE L%T)) (PROGN (SETQ G (CADR |lhs|)) (APPEND (|bfINON| (LIST OP G |whole|)) (|bfSuchthat| (|bfIS| G (CADDR |lhs|)))))) (#1# (PROGN (SETQ G (|bfGenSymbol|)) (APPEND (|bfINON| (LIST OP G |whole|)) (|bfSuchthat| (|bfIS| G |lhs|)))))))))))))
(DEFUN |bfSTEP| (|id| |fst| |step| |lst|) (PROG (|suc| |ex| |pred| |final| |g2| |inc| |g1| |initval| |initvar|) (RETURN (PROGN (SETQ |initvar| (LIST |id|)) (SETQ |initval| (LIST |fst|)) (SETQ |inc| (COND ((ATOM |step|) |step|) (#0=(QUOTE T) (SETQ |g1| (|bfGenSymbol|)) (SETQ |initvar| (CONS |g1| |initvar|)) (SETQ |initval| (CONS |step| |initval|)) |g1|))) (SETQ |final| (COND ((ATOM |lst|) |lst|) (#0# (SETQ |g2| (|bfGenSymbol|)) (SETQ |initvar| (CONS |g2| |initvar|)) (SETQ |initval| (CONS |lst| |initval|)) |g2|))) (SETQ |ex| (COND ((NULL |lst|) NIL) ((INTEGERP |inc|) (PROGN (SETQ |pred| (COND ((MINUSP |inc|) (QUOTE <)) (#0# (QUOTE >)))) (LIST (LIST |pred| |id| |final|)))) ((QUOTE T) (LIST (LIST (QUOTE COND) (LIST (LIST (QUOTE MINUSP) |inc|) (LIST (QUOTE <) |id| |final|)) (LIST (QUOTE T) (LIST (QUOTE >) |id| |final|))))))) (SETQ |suc| (LIST (LIST (QUOTE SETQ) |id| (LIST (QUOTE +) |id| |inc|)))) (LIST (LIST |initvar| |initval| |suc| NIL |ex| NIL))))))
(DEFUN |bfINON| (|x|) (PROG (|whole| |id| |op|) (RETURN (PROGN (SETQ |op| (CAR |x|)) (SETQ |id| (CADR . #0=(|x|))) (SETQ |whole| (CADDR . #0#)) (COND ((EQ |op| (QUOTE ON)) (|bfON| |id| |whole|)) ((QUOTE T) (|bfIN| |id| |whole|)))))))
(DEFUN |bfIN| (|x| E) (PROG (|g|) (RETURN (PROGN (SETQ |g| (|bfGenSymbol|)) (LIST (LIST (LIST |g| |x|) (LIST E NIL) (LIST (LIST (QUOTE SETQ) |g| (LIST (QUOTE CDR) |g|))) NIL (LIST (LIST (QUOTE OR) (LIST (QUOTE ATOM) |g|) (LIST (QUOTE PROGN) (LIST (QUOTE SETQ) |x| (LIST (QUOTE CAR) |g|)) (QUOTE NIL)))) NIL))))))
(DEFUN |bfON| (|x| E) (PROG NIL (RETURN (LIST (LIST (LIST |x|) (LIST E) (LIST (LIST (QUOTE SETQ) |x| (LIST (QUOTE CDR) |x|))) NIL (LIST (LIST (QUOTE ATOM) |x|)) NIL)))))
(DEFUN |bfSuchthat| (|p|) (PROG NIL (RETURN (LIST (LIST NIL NIL NIL (LIST |p|) NIL NIL)))))
(DEFUN |bfWhile| (|p|) (PROG NIL (RETURN (LIST (LIST NIL NIL NIL NIL (LIST (|bfNOT| |p|)) NIL)))))
(DEFUN |bfUntil| (|p|) (PROG (|g|) (RETURN (PROGN (SETQ |g| (|bfGenSymbol|)) (LIST (LIST (LIST |g|) (LIST NIL) (LIST (LIST (QUOTE SETQ) |g| |p|)) NIL (LIST |g|) NIL))))))
(DEFUN |bfIterators| (|x|) (PROG NIL (RETURN (CONS (QUOTE ITERATORS) |x|))))
(DEFUN |bfCross| (|x|) (PROG NIL (RETURN (CONS (QUOTE CROSS) |x|))))
(DEFUN |bfLp| (|iters| |body|) (PROG NIL (RETURN (COND ((EQCAR |iters| (QUOTE ITERATORS)) (|bfLp1| (CDR |iters|) |body|)) ((QUOTE T) (|bfLpCross| (CDR |iters|) |body|))))))
(DEFUN |bfLpCross| (|iters| |body|) (PROG NIL (RETURN (COND ((NULL (CDR |iters|)) (|bfLp| (CAR |iters|) |body|)) ((QUOTE T) (|bfLp| (CAR |iters|) (|bfLpCross| (CDR |iters|) |body|)))))))
(DEFUN |bfSep| (|iters|) (PROG (|r| |f|) (RETURN (COND ((NULL |iters|) (LIST NIL NIL NIL NIL NIL NIL)) ((QUOTE T) (SETQ |f| (CAR |iters|)) (SETQ |r| (|bfSep| (CDR |iters|))) ((LAMBDA (|bfVar#6| |bfVar#4| |i| |bfVar#5| |j|) (LOOP (COND ((OR (ATOM |bfVar#4|) (PROGN (SETQ |i| (CAR |bfVar#4|)) NIL) (ATOM |bfVar#5|) (PROGN (SETQ |j| (CAR |bfVar#5|)) NIL)) (RETURN (NREVERSE |bfVar#6|))) ((QUOTE T) (SETQ |bfVar#6| (CONS (APPEND |i| |j|) |bfVar#6|)))) (SETQ |bfVar#4| (CDR |bfVar#4|)) (SETQ |bfVar#5| (CDR |bfVar#5|)))) NIL |f| NIL |r| NIL))))))
(DEFUN |bfReduce| (|op| |y|) (PROG (|it| |ny| |g2| |body| |g1| |g| |init| |a|) (RETURN (PROGN (SETQ |a| (COND ((EQCAR |op| (QUOTE QUOTE)) (CADR |op|)) (#0=(QUOTE T) |op|))) (SETQ |op| (|bfReName| |a|)) (SETQ |init| (GET |op| (QUOTE SHOETHETA))) (SETQ |g| (|bfGenSymbol|)) (SETQ |g1| (|bfGenSymbol|)) (SETQ |body| (LIST (QUOTE SETQ) |g| (LIST |op| |g1| |g|))) (COND ((NULL |init|) (SETQ |g2| (|bfGenSymbol|)) (SETQ |init| (LIST (QUOTE CAR) |g2|)) (SETQ |ny| (LIST (QUOTE CDR) |g2|)) (SETQ |it| (CONS (QUOTE ITERATORS) (LIST (LIST (LIST (LIST |g|) (LIST |init|) NIL NIL NIL (LIST |g|))) (|bfIN| |g1| |ny|)))) (|bfMKPROGN| (LIST (LIST (QUOTE L%T) |g2| |y|) (|bfLp| |it| |body|)))) (#0# (SETQ |init| (CAR |init|)) (SETQ |it| (CONS (QUOTE ITERATORS) (LIST (LIST (LIST (LIST |g|) (LIST |init|) NIL NIL NIL (LIST |g|))) (|bfIN| |g1| |y|)))) (|bfLp| |it| |body|)))))))
(DEFUN |bfReduceCollect| (|op| |y|) (PROG (|init| |a| |itl| |body|) (RETURN (COND ((EQCAR |y| (QUOTE COLLECT)) (SETQ |body| (ELT |y| 1)) (SETQ |itl| (ELT |y| 2)) (SETQ |a| (COND ((EQCAR |op| (QUOTE QUOTE)) (CADR |op|)) (#0=(QUOTE T) |op|))) (SETQ |op| (|bfReName| |a|)) (SETQ |init| (GET |op| (QUOTE SHOETHETA))) (|bfOpReduce| |op| |init| |body| |itl|)) (#0# (SETQ |a| (|bfTupleConstruct| (ELT |y| 1))) (|bfReduce| |op| |a|))))))
(DEFUN |bfDCollect| (|y| |itl|) (PROG NIL (RETURN (LIST (QUOTE COLLECT) |y| |itl|))))
(DEFUN |bfDTuple| (|x|) (PROG NIL (RETURN (LIST (QUOTE DTUPLE) |x|))))
(DEFUN |bfCollect| (|y| |itl|) (PROG (|newBody| |a| |ISTMP#1|) (RETURN (COND ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE COLON)) (PROGN (SETQ |ISTMP#1| (CDR |y|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (QUOTE T))))) (|bf0APPEND| |a| |itl|)) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE TUPLE))) (PROGN (SETQ |newBody| (|bfConstruct| |y|)) (|bf0APPEND| |newBody| |itl|))) ((QUOTE T) (|bf0COLLECT| |y| |itl|))))))
(DEFUN |bf0COLLECT| (|y| |itl|) (PROG NIL (RETURN (|bfListReduce| (QUOTE CONS) |y| |itl|))))
(DEFUN |bf0APPEND| (|y| |itl|) (PROG (|extrait| |body| |g|) (RETURN (PROGN (SETQ |g| (|bfGenSymbol|)) (SETQ |body| (LIST (QUOTE SETQ) |g| (LIST (QUOTE APPEND) (LIST (QUOTE REVERSE) |y|) |g|))) (SETQ |extrait| (LIST (LIST (LIST |g|) (LIST NIL) NIL NIL NIL (LIST (LIST (QUOTE NREVERSE) |g|))))) (|bfLp2| |extrait| |itl| |body|)))))
(DEFUN |bfListReduce| (|op| |y| |itl|) (PROG (|extrait| |body| |g|) (RETURN (PROGN (SETQ |g| (|bfGenSymbol|)) (SETQ |body| (LIST (QUOTE SETQ) |g| (LIST |op| |y| |g|))) (SETQ |extrait| (LIST (LIST (LIST |g|) (LIST NIL) NIL NIL NIL (LIST (LIST (QUOTE NREVERSE) |g|))))) (|bfLp2| |extrait| |itl| |body|)))))
(DEFUN |bfLp1| (|iters| |body|) (PROG (|loop| |nbody| |value| |exits| |filters| |sucs| |inits| |vars| |LETTMP#1|) (RETURN (PROGN (SETQ |LETTMP#1| (|bfSep| (|bfAppend| |iters|))) (SETQ |vars| (CAR |LETTMP#1|)) (SETQ |inits| (CADR . #0=(|LETTMP#1|))) (SETQ |sucs| (CADDR . #0#)) (SETQ |filters| (CADDDR . #0#)) (SETQ |exits| (CAR #1=(CDDDDR . #0#))) (SETQ |value| (CADR #1#)) (SETQ |nbody| (COND ((NULL |filters|) |body|) (#2=(QUOTE T) (|bfAND| (APPEND |filters| (CONS |body| NIL)))))) (SETQ |value| (COND ((NULL |value|) (QUOTE NIL)) (#2# (CAR |value|)))) (SETQ |exits| (LIST (QUOTE COND) (LIST (|bfOR| |exits|) (LIST (QUOTE RETURN) |value|)) (LIST (QUOTE (QUOTE T)) |nbody|))) (SETQ |loop| (CONS (LIST (QUOTE LAMBDA) |vars| (CONS (QUOTE LOOP) (CONS |exits| |sucs|))) |inits|)) |loop|))))
(DEFUN |bfLp2| (|extrait| |itl| |body|) (PROG (|iters|) (RETURN (COND ((EQCAR |itl| (QUOTE ITERATORS)) (|bfLp1| (CONS |extrait| (CDR |itl|)) |body|)) ((QUOTE T) (PROGN (SETQ |iters| (CDR |itl|)) (|bfLpCross| (CONS (CONS (QUOTE ITERATORS) (CONS |extrait| (CDAR |iters|))) (CDR |iters|)) |body|)))))))
(DEFUN |bfOpReduce| (|op| |init| |y| |itl|) (PROG (|extrait| |g1| |body| |g|) (RETURN (PROGN (SETQ |g| (|bfGenSymbol|)) (SETQ |body| (COND ((EQ |op| (QUOTE AND)) (|bfMKPROGN| (LIST (LIST (QUOTE SETQ) |g| |y|) (LIST (QUOTE COND) (LIST (LIST (QUOTE NOT) |g|) (LIST (QUOTE RETURN) (QUOTE NIL))))))) ((EQ |op| (QUOTE OR)) (|bfMKPROGN| (LIST (LIST (QUOTE SETQ) |g| |y|) (LIST (QUOTE COND) (LIST |g| (LIST (QUOTE RETURN) |g|)))))) ((QUOTE T) (LIST (QUOTE SETQ) |g| (LIST |op| |g| |y|))))) (COND ((NULL |init|) (SETQ |g1| (|bfGenSymbol|)) (SETQ |init| (LIST (QUOTE CAR) |g1|)) (SETQ |y| (LIST (QUOTE CDR) |g1|)) (SETQ |extrait| (LIST (LIST (LIST |g|) (LIST |init|) NIL NIL NIL (LIST |g|)))) (|bfMKPROGN| (LIST (LIST (QUOTE L%T) |g1| |y|) (|bfLp2| |extrait| |itl| |body|)))) ((QUOTE T) (SETQ |init| (CAR |init|)) (SETQ |extrait| (LIST (LIST (LIST |g|) (LIST |init|) NIL NIL NIL (LIST |g|)))) (|bfLp2| |extrait| |itl| |body|)))))))
(DEFUN |bfLoop1| (|body|) (PROG NIL (RETURN (|bfLp| (|bfIterators| NIL) |body|))))
(DEFUN |bfSegment1| (|lo|) (PROG NIL (RETURN (LIST (QUOTE SEGMENT) |lo| NIL))))
(DEFUN |bfSegment2| (|lo| |hi|) (PROG NIL (RETURN (LIST (QUOTE SEGMENT) |lo| |hi|))))
(DEFUN |bfForInBy| (|variable| |collection| |step|) (PROG NIL (RETURN (|bfFor| |variable| |collection| |step|))))
(DEFUN |bfForin| (|lhs| U) (PROG NIL (RETURN (|bfFor| |lhs| U 1))))
(DEFUN |bfLocal| (|a| |b|) (PROG NIL (RETURN (COND ((EQ |b| (QUOTE FLUID)) (|compFluid| |a|)) ((EQ |b| (QUOTE |fluid|)) (|compFluid| |a|)) ((EQ |b| (QUOTE |local|)) (|compFluid| |a|)) ((QUOTE T) |a|)))))
(DEFUN |bfTake| (|n| |x|) (PROG NIL (RETURN (COND ((NULL |x|) |x|) ((EQL |n| 0) NIL) ((QUOTE T) (CONS (CAR |x|) (|bfTake| (- |n| 1) (CDR |x|))))))))
(DEFUN |bfDrop| (|n| |x|) (PROG NIL (RETURN (COND ((OR (NULL |x|) (EQL |n| 0)) |x|) ((QUOTE T) (|bfDrop| (- |n| 1) (CDR |x|)))))))
(DEFUN |bfDefSequence| (|l|) (PROG NIL (RETURN (CONS (QUOTE SEQ) |l|))))
(DEFUN |bfReturnNoName| (|a|) (PROG NIL (RETURN (LIST (QUOTE RETURN) |a|))))
(DEFUN |bfSUBLIS| (|p| |e|) (PROG NIL (RETURN (COND ((ATOM |e|) (|bfSUBLIS1| |p| |e|)) ((EQCAR |e| (QUOTE QUOTE)) |e|) ((QUOTE T) (CONS (|bfSUBLIS| |p| (CAR |e|)) (|bfSUBLIS| |p| (CDR |e|))))))))
(DEFUN |bfSUBLIS1| (|p| |e|) (PROG (|f|) (RETURN (COND ((NULL |p|) |e|) (#0=(QUOTE T) (PROGN (SETQ |f| (CAR |p|)) (COND ((EQ (CAR |f|) |e|) (CDR |f|)) (#0# (|bfSUBLIS1| (CDR |p|) |e|)))))))))
(DEFUN |defSheepAndGoats| (|x|) (PROG (|defstack| |op1| |opassoc| |argl| |body| |args| |op| |def|) (DECLARE (SPECIAL |$op|)) (RETURN (COND ((EQCAR |x| (QUOTE DEF)) (PROGN (SETQ |def| (CAR |x|)) (SETQ |op| (CADR . #0=(|x|))) (SETQ |args| (CADDR . #0#)) (SETQ |body| (CADDDR . #0#)) (SETQ |argl| (COND ((|bfTupleP| |args|) (CDR |args|)) (#1=(QUOTE T) (LIST |args|)))) (COND ((NULL |argl|) (SETQ |opassoc| (LIST (CONS |op| |body|))) (LIST |opassoc| NIL NIL)) (#1# (SETQ |op1| (INTERN (CONCAT (PNAME |$op|) "," (PNAME |op|)))) (SETQ |opassoc| (LIST (CONS |op| |op1|))) (SETQ |defstack| (LIST (LIST (QUOTE DEF) |op1| |args| |body|))) (LIST |opassoc| |defstack| NIL))))) ((EQCAR |x| (QUOTE SEQ)) (|defSheepAndGoatsList| (CDR |x|))) ((QUOTE T) (LIST NIL NIL (LIST |x|)))))))
(DEFUN |defSheepAndGoatsList| (|x|) (PROG (|nondefs1| |defs1| |opassoc1| |nondefs| |defs| |opassoc| |LETTMP#1|) (RETURN (COND ((NULL |x|) (LIST NIL NIL NIL)) ((QUOTE T) (SETQ |LETTMP#1| (|defSheepAndGoats| (CAR |x|))) (SETQ |opassoc| (CAR |LETTMP#1|)) (SETQ |defs| (CADR . #0=(|LETTMP#1|))) (SETQ |nondefs| (CADDR . #0#)) (SETQ |LETTMP#1| (|defSheepAndGoatsList| (CDR |x|))) (SETQ |opassoc1| (CAR |LETTMP#1|)) (SETQ |defs1| (CADR . #1=(|LETTMP#1|))) (SETQ |nondefs1| (CADDR . #1#)) (LIST (APPEND |opassoc| |opassoc1|) (APPEND |defs| |defs1|) (APPEND |nondefs| |nondefs1|)))))))
(DEFUN |bfLetForm| (|lhs| |rhs|) (PROG NIL (RETURN (LIST (QUOTE L%T) |lhs| |rhs|))))
(DEFUN |bfLET1| (|lhs| |rhs|) (PROG (|let1| |g| |l2| |l1| |name| |rhs1| |ISTMP#1|) (DECLARE (SPECIAL |$letGenVarCounter|)) (RETURN (COND ((IDENTP |lhs|) (|bfLetForm| |lhs| |rhs|)) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE FLUID)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL)))) (|bfLetForm| |lhs| |rhs|)) ((AND (IDENTP |rhs|) (NULL (|bfCONTAINED| |rhs| |lhs|))) (PROGN (SETQ |rhs1| (|bfLET2| |lhs| |rhs|)) (COND ((EQCAR |rhs1| (QUOTE L%T)) (|bfMKPROGN| (LIST |rhs1| |rhs|))) ((EQCAR |rhs1| (QUOTE PROGN)) (APPEND |rhs1| (LIST |rhs|))) (#0=(QUOTE T) (PROGN (COND ((IDENTP (CAR |rhs1|)) (SETQ |rhs1| (CONS |rhs1| NIL)))) (|bfMKPROGN| (APPEND |rhs1| (CONS |rhs| NIL)))))))) ((AND (CONSP |rhs|) (EQCAR |rhs| (QUOTE L%T)) (IDENTP (SETQ |name| (CADR |rhs|)))) (PROGN (SETQ |l1| (|bfLET1| |name| (CADDR |rhs|))) (SETQ |l2| (|bfLET1| |lhs| |name|)) (COND ((EQCAR |l2| (QUOTE PROGN)) (|bfMKPROGN| (CONS |l1| (CDR |l2|)))) (#0# (PROGN (COND ((IDENTP (CAR |l2|)) (SETQ |l2| (CONS |l2| NIL)))) (|bfMKPROGN| (CONS |l1| (APPEND |l2| (CONS |name| NIL))))))))) (#0# (PROGN (SETQ |g| (INTERN (CONCAT "LETTMP#" (STRINGIMAGE |$letGenVarCounter|)))) (SETQ |$letGenVarCounter| (+ |$letGenVarCounter| 1)) (SETQ |rhs1| (LIST (QUOTE L%T) |g| |rhs|)) (SETQ |let1| (|bfLET1| |lhs| |g|)) (COND ((EQCAR |let1| (QUOTE PROGN)) (|bfMKPROGN| (CONS |rhs1| (CDR |let1|)))) (#0# (PROGN (COND ((IDENTP (CAR |let1|)) (SETQ |let1| (CONS |let1| NIL)))) (|bfMKPROGN| (CONS |rhs1| (APPEND |let1| (CONS |g| NIL)))))))))))))
(DEFUN |bfCONTAINED| (|x| |y|) (PROG NIL (RETURN (COND ((EQ |x| |y|) T) ((ATOM |y|) NIL) ((QUOTE T) (OR (|bfCONTAINED| |x| (CAR |y|)) (|bfCONTAINED| |x| (CDR |y|))))))))
(DEFUN |bfLET2| (|lhs| |rhs|) (PROG (|val1| |ISTMP#3| |g| |rev| |patrev| |l2| |l1| |var2| |var1| |b| |ISTMP#2| |a| |ISTMP#1|) (DECLARE (SPECIAL |$letGenVarCounter|)) (RETURN (COND ((IDENTP |lhs|) (|bfLetForm| |lhs| |rhs|)) ((NULL |lhs|) NIL) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE FLUID)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL)))) (|bfLetForm| |lhs| |rhs|)) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#2|)) #0=(QUOTE T))))))) (PROGN (SETQ |a| (|bfLET2| |a| |rhs|)) (COND ((NULL (SETQ |b| (|bfLET2| |b| |rhs|))) |a|) ((ATOM |b|) (LIST |a| |b|)) ((CONSP (CAR |b|)) (CONS |a| |b|)) (#1=(QUOTE T) (LIST |a| |b|))))) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE CONS)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |var1| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |var2| (CAR |ISTMP#2|)) #0#)))))) (COND ((OR (EQ |var1| (QUOTE DOT)) (AND (CONSP |var1|) (EQCAR |var1| (QUOTE QUOTE)))) (|bfLET2| |var2| (|addCARorCDR| (QUOTE CDR) |rhs|))) (#1# (PROGN (SETQ |l1| (|bfLET2| |var1| (|addCARorCDR| (QUOTE CAR) |rhs|))) (COND ((OR (NULL |var2|) (EQ |var2| (QUOTE DOT))) |l1|) (#1# (PROGN (COND ((AND (CONSP |l1|) (ATOM (CAR |l1|))) (SETQ |l1| (CONS |l1| NIL)))) (COND ((IDENTP |var2|) (APPEND |l1| (CONS (|bfLetForm| |var2| (|addCARorCDR| (QUOTE CDR) |rhs|)) NIL))) (#1# (PROGN (SETQ |l2| (|bfLET2| |var2| (|addCARorCDR| (QUOTE CDR) |rhs|))) (COND ((AND (CONSP |l2|) (ATOM (CAR |l2|))) (SETQ |l2| (CONS |l2| NIL)))) (APPEND |l1| |l2|))))))))))) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE APPEND)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |var1| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |var2| (CAR |ISTMP#2|)) #0#)))))) (PROGN (SETQ |patrev| (|bfISReverse| |var2| |var1|)) (SETQ |rev| (LIST (QUOTE REVERSE) |rhs|)) (SETQ |g| (INTERN (CONCAT "LETTMP#" (STRINGIMAGE |$letGenVarCounter|)))) (SETQ |$letGenVarCounter| (+ |$letGenVarCounter| 1)) (SETQ |l2| (|bfLET2| |patrev| |g|)) (COND ((AND (CONSP |l2|) (ATOM (CAR |l2|))) (SETQ |l2| (CONS |l2| NIL)))) (COND ((EQ |var1| (QUOTE DOT)) (CONS (LIST (QUOTE L%T) |g| |rev|) |l2|)) ((PROGN (SETQ |ISTMP#1| (|last| |l2|)) (AND (CONSP |ISTMP#1|) (EQ (CAR |ISTMP#1|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQUAL (CAR |ISTMP#2|) |var1|) (PROGN (SETQ |ISTMP#3| (CDR |ISTMP#2|)) (AND (CONSP |ISTMP#3|) (EQ (CDR |ISTMP#3|) NIL) (PROGN (SETQ |val1| (CAR |ISTMP#3|)) #0#))))))) (CONS (LIST (QUOTE L%T) |g| |rev|) (APPEND (REVERSE (CDR (REVERSE |l2|))) (CONS (|bfLetForm| |var1| (LIST (QUOTE NREVERSE) |val1|)) NIL)))) (#1# (CONS (LIST (QUOTE L%T) |g| |rev|) (APPEND |l2| (CONS (|bfLetForm| |var1| (LIST (QUOTE NREVERSE) |var1|)) NIL))))))) ((AND (CONSP |lhs|) (EQ (CAR |lhs|) (QUOTE EQUAL)) (PROGN (SETQ |ISTMP#1| (CDR |lhs|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |var1| (CAR |ISTMP#1|)) #0#)))) (LIST (QUOTE COND) (LIST (LIST (QUOTE EQUAL) |var1| |rhs|) |var1|))) (#1# (PROGN (|bpSpecificErrorHere| "unexpected  LET code is generated in this line") (REALLYPRETTYPRINT |lhs|) (|bpTrap|)))))))
(DEFUN |bfLET| (|lhs| |rhs|) (PROG (|$letGenVarCounter|) (DECLARE (SPECIAL |$letGenVarCounter|)) (RETURN (PROGN (SETQ |$letGenVarCounter| 1) (|bfLET1| |lhs| |rhs|)))))
(DEFUN |addCARorCDR| (|acc| |expr|) (PROG (|funsR| |funsA| |p| |funs|) (RETURN (COND ((NULL (CONSP |expr|)) (LIST |acc| |expr|)) ((AND (EQ |acc| (QUOTE CAR)) (EQCAR |expr| (QUOTE REVERSE))) (LIST (QUOTE CAR) (CONS (QUOTE LAST) (CDR |expr|)))) (#0=(QUOTE T) (PROGN (SETQ |funs| (QUOTE (CAR CDR CAAR CDAR CADR CDDR CAAAR CADAR CAADR CADDR CDAAR CDDAR CDADR CDDDR))) (SETQ |p| (|bfPosition| (CAR |expr|) |funs|)) (COND ((EQUAL |p| (- 1)) (LIST |acc| |expr|)) (#0# (PROGN (SETQ |funsA| (QUOTE (CAAR CADR CAAAR CADAR CAADR CADDR CAAAAR CAADAR CAAADR CAADDR CADAAR CADDAR CADADR CADDDR))) (SETQ |funsR| (QUOTE (CDAR CDDR CDAAR CDDAR CDADR CDDDR CDAAAR CDADAR CDAADR CDADDR CDDAAR CDDDAR CDDADR CDDDDR))) (COND ((EQ |acc| (QUOTE CAR)) (CONS (ELT |funsA| |p|) (CDR |expr|))) ((QUOTE T) (CONS (ELT |funsR| |p|) (CDR |expr|)))))))))))))
(DEFUN |bfPosition| (|x| |l|) (PROG NIL (RETURN (|bfPosn| |x| |l| 0))))
(DEFUN |bfPosn| (|x| |l| |n|) (PROG NIL (RETURN (COND ((NULL |l|) (- 1)) ((EQUAL |x| (CAR |l|)) |n|) ((QUOTE T) (|bfPosn| |x| (CDR |l|) (+ |n| 1)))))))
(DEFUN |bfISApplication| (|op| |left| |right|) (PROG NIL (RETURN (COND ((EQ |op| (QUOTE IS)) (|bfIS| |left| |right|)) ((EQ |op| (QUOTE ISNT)) (|bfNOT| (|bfIS| |left| |right|))) ((QUOTE T) (LIST |op| |left| |right|))))))
(DEFUN |bfIS| (|left| |right|) (PROG (|$inDefIS| |$isGenVarCounter|) (DECLARE (SPECIAL |$inDefIS| |$isGenVarCounter|)) (RETURN (PROGN (SETQ |$isGenVarCounter| 1) (SETQ |$inDefIS| T) (|bfIS1| |left| |right|)))))
(DEFUN |bfISReverse| (|x| |a|) (PROG (|y|) (RETURN (COND ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE CONS))) (COND ((NULL (CADDR |x|)) (LIST (QUOTE CONS) (CADR |x|) |a|)) (#0=(QUOTE T) (PROGN (SETQ |y| (|bfISReverse| (CADDR |x|) NIL)) (RPLACA (CDDR |y|) (LIST (QUOTE CONS) (CADR |x|) |a|)) |y|)))) (#0# (PROGN (|bpSpecificErrorHere| "Error in bfISReverse") (|bpTrap|)))))))
(DEFUN |bfIS1| (|lhs| |rhs|) (PROG (|l2| |rev| |patrev| |cls| |b1| |a1| |b| |g| |l| |d| |ISTMP#2| |c| |a| |ISTMP#1|) (DECLARE (SPECIAL |$isGenVarCounter|)) (RETURN (COND ((NULL |rhs|) (LIST (QUOTE NULL) |lhs|)) ((STRINGP |rhs|) (LIST (QUOTE EQ) |lhs| (LIST (QUOTE QUOTE) (INTERN |rhs|)))) ((NUMBERP |rhs|) (LIST (QUOTE EQUAL) |lhs| |rhs|)) ((ATOM |rhs|) (LIST (QUOTE PROGN) (|bfLetForm| |rhs| |lhs|) (QUOTE (QUOTE T)))) ((AND (CONSP |rhs|) (EQ (CAR |rhs|) (QUOTE QUOTE)) (PROGN (SETQ |ISTMP#1| (CDR |rhs|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) #0=(QUOTE T))))) (COND ((IDENTP |a|) (LIST (QUOTE EQ) |lhs| |rhs|)) (#1=(QUOTE T) (LIST (QUOTE EQUAL) |lhs| |rhs|)))) ((AND (CONSP |rhs|) (EQ (CAR |rhs|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#1| (CDR |rhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |c| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |d| (CAR |ISTMP#2|)) #0#)))))) (PROGN (SETQ |l| (|bfLET| |c| |lhs|)) (LIST (QUOTE AND) (|bfIS1| |lhs| |d|) (|bfMKPROGN| (LIST |l| (QUOTE (QUOTE T))))))) ((AND (CONSP |rhs|) (EQ (CAR |rhs|) (QUOTE EQUAL)) (PROGN (SETQ |ISTMP#1| (CDR |rhs|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) #0#)))) (LIST (QUOTE EQUAL) |lhs| |a|)) ((CONSP |lhs|) (PROGN (SETQ |g| (INTERN (CONCAT "ISTMP#" (STRINGIMAGE |$isGenVarCounter|)))) (SETQ |$isGenVarCounter| (+ |$isGenVarCounter| 1)) (|bfMKPROGN| (LIST (LIST (QUOTE L%T) |g| |lhs|) (|bfIS1| |g| |rhs|))))) ((AND (CONSP |rhs|) (EQ (CAR |rhs|) (QUOTE CONS)) (PROGN (SETQ |ISTMP#1| (CDR |rhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#2|)) #0#)))))) (COND ((EQ |a| (QUOTE DOT)) (COND ((NULL |b|) (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (LIST (QUOTE EQ) (LIST (QUOTE CDR) |lhs|) (QUOTE NIL)))) (#1# (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (|bfIS1| (LIST (QUOTE CDR) |lhs|) |b|))))) ((NULL |b|) (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (LIST (QUOTE EQ) (LIST (QUOTE CDR) |lhs|) (QUOTE NIL)) (|bfIS1| (LIST (QUOTE CAR) |lhs|) |a|))) ((EQ |b| (QUOTE DOT)) (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (|bfIS1| (LIST (QUOTE CAR) |lhs|) |a|))) (#1# (PROGN (SETQ |a1| (|bfIS1| (LIST (QUOTE CAR) |lhs|) |a|)) (SETQ |b1| (|bfIS1| (LIST (QUOTE CDR) |lhs|) |b|)) (COND ((AND (CONSP |a1|) (EQ (CAR |a1|) (QUOTE PROGN)) (PROGN (SETQ |ISTMP#1| (CDR |a1|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |c| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (EQUAL (CAR |ISTMP#2|) (QUOTE (QUOTE T))))))) (CONSP |b1|) (EQ (CAR |b1|) (QUOTE PROGN)) (PROGN (SETQ |cls| (CDR |b1|)) #0#)) (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (|bfMKPROGN| (CONS |c| |cls|)))) (#1# (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) |a1| |b1|))))))) ((AND (CONSP |rhs|) (EQ (CAR |rhs|) (QUOTE APPEND)) (PROGN (SETQ |ISTMP#1| (CDR |rhs|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#2|)) #0#)))))) (PROGN (SETQ |patrev| (|bfISReverse| |b| |a|)) (SETQ |g| (INTERN (CONCAT "ISTMP#" (STRINGIMAGE |$isGenVarCounter|)))) (SETQ |$isGenVarCounter| (+ |$isGenVarCounter| 1)) (SETQ |rev| (LIST (QUOTE AND) (LIST (QUOTE CONSP) |lhs|) (LIST (QUOTE PROGN) (LIST (QUOTE L%T) |g| (LIST (QUOTE REVERSE) |lhs|)) (QUOTE (QUOTE T))))) (SETQ |l2| (|bfIS1| |g| |patrev|)) (COND ((AND (CONSP |l2|) (ATOM (CAR |l2|))) (SETQ |l2| (CONS |l2| NIL)))) (COND ((EQ |a| (QUOTE DOT)) (CONS (QUOTE AND) (CONS |rev| |l2|))) (#1# (CONS (QUOTE AND) (CONS |rev| (APPEND |l2| (CONS (LIST (QUOTE PROGN) (|bfLetForm| |a| (LIST (QUOTE NREVERSE) |a|)) (QUOTE (QUOTE T))) NIL)))))))) (#1# (PROGN (|bpSpecificErrorHere| "bad IS code is generated") (|bpTrap|)))))))
(DEFUN |bfApplication| (|bfop| |bfarg|) (PROG NIL (RETURN (COND ((|bfTupleP| |bfarg|) (CONS |bfop| (CDR |bfarg|))) ((QUOTE T) (CONS |bfop| (LIST |bfarg|)))))))
(DEFUN |bfReName| (|x|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (GET |x| (QUOTE SHOERENAME))) (COND (|a| (CAR |a|)) ((QUOTE T) |x|))))))
(DEFUN |bfInfApplication| (|op| |left| |right|) (PROG NIL (RETURN (COND ((EQ |op| (QUOTE EQUAL)) (|bfQ| |left| |right|)) ((EQ |op| (QUOTE /=)) (|bfNOT| (|bfQ| |left| |right|))) ((EQ |op| (QUOTE >)) (|bfLessp| |right| |left|)) ((EQ |op| (QUOTE <)) (|bfLessp| |left| |right|)) ((EQ |op| (QUOTE <=)) (|bfNOT| (|bfLessp| |right| |left|))) ((EQ |op| (QUOTE >=)) (|bfNOT| (|bfLessp| |left| |right|))) ((EQ |op| (QUOTE OR)) (|bfOR| (LIST |left| |right|))) ((EQ |op| (QUOTE AND)) (|bfAND| (LIST |left| |right|))) ((QUOTE T) (LIST |op| |left| |right|))))))
(DEFUN |bfNOT| (|x|) (PROG (|a| |ISTMP#1|) (RETURN (COND ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE NOT)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) #0=(QUOTE T))))) |a|) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE NULL)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) #0#)))) |a|) ((QUOTE T) (LIST (QUOTE NOT) |x|))))))
(DEFUN |bfFlatten| (|op| |x|) (PROG NIL (RETURN (COND ((EQCAR |x| |op|) (CDR |x|)) ((QUOTE T) (LIST |x|))))))
(DEFUN |bfOR| (|l|) (PROG NIL (RETURN (COND ((NULL |l|) NIL) ((NULL (CDR |l|)) (CAR |l|)) ((QUOTE T) (CONS (QUOTE OR) ((LAMBDA (|bfVar#8| |bfVar#7| |c|) (LOOP (COND ((OR (ATOM |bfVar#7|) (PROGN (SETQ |c| (CAR |bfVar#7|)) NIL)) (RETURN (NREVERSE |bfVar#8|))) ((QUOTE T) (SETQ |bfVar#8| (APPEND (REVERSE (|bfFlatten| (QUOTE OR) |c|)) |bfVar#8|)))) (SETQ |bfVar#7| (CDR |bfVar#7|)))) NIL |l| NIL)))))))
(DEFUN |bfAND| (|l|) (PROG NIL (RETURN (COND ((NULL |l|) (QUOTE T)) ((NULL (CDR |l|)) (CAR |l|)) ((QUOTE T) (CONS (QUOTE AND) ((LAMBDA (|bfVar#10| |bfVar#9| |c|) (LOOP (COND ((OR (ATOM |bfVar#9|) (PROGN (SETQ |c| (CAR |bfVar#9|)) NIL)) (RETURN (NREVERSE |bfVar#10|))) ((QUOTE T) (SETQ |bfVar#10| (APPEND (REVERSE (|bfFlatten| (QUOTE AND) |c|)) |bfVar#10|)))) (SETQ |bfVar#9| (CDR |bfVar#9|)))) NIL |l| NIL)))))))
(DEFUN |defQuoteId| (|x|) (PROG NIL (RETURN (AND (EQCAR |x| (QUOTE QUOTE)) (IDENTP (CADR |x|))))))
(DEFUN |bfSmintable| (|x|) (PROG NIL (RETURN (OR (INTEGERP |x|) (AND (CONSP |x|) (MEMQ (CAR |x|) (QUOTE (SIZE LENGTH))))))))
(DEFUN |bfQ| (|l| |r|) (PROG NIL (RETURN (COND ((OR (|bfSmintable| |l|) (|bfSmintable| |r|)) (LIST (QUOTE EQL) |l| |r|)) ((OR (|defQuoteId| |l|) (|defQuoteId| |r|)) (LIST (QUOTE EQ) |l| |r|)) ((NULL |l|) (LIST (QUOTE NULL) |r|)) ((NULL |r|) (LIST (QUOTE NULL) |l|)) ((QUOTE T) (LIST (QUOTE EQUAL) |l| |r|))))))
(DEFUN |bfLessp| (|l| |r|) (PROG NIL (RETURN (COND ((EQL |r| 0) (LIST (QUOTE MINUSP) |l|)) ((QUOTE T) (LIST (QUOTE <) |l| |r|))))))
(DEFUN |bfMDef| (|defOp| |op| |args| |body|) (PROG (|def| |lamex| |sb2| |sb| |largl| |nargl| |sgargl| |gargl| |LETTMP#1| |argl|) (DECLARE (SPECIAL |$wheredefs|)) (RETURN (PROGN (SETQ |argl| (COND ((|bfTupleP| |args|) (CDR |args|)) ((QUOTE T) (LIST |args|)))) (SETQ |LETTMP#1| (|bfGargl| |argl|)) (SETQ |gargl| (CAR |LETTMP#1|)) (SETQ |sgargl| (CADR . #0=(|LETTMP#1|))) (SETQ |nargl| (CADDR . #0#)) (SETQ |largl| (CADDDR . #0#)) (SETQ |sb| ((LAMBDA (|bfVar#13| |bfVar#11| |i| |bfVar#12| |j|) (LOOP (COND ((OR (ATOM |bfVar#11|) (PROGN (SETQ |i| (CAR |bfVar#11|)) NIL) (ATOM |bfVar#12|) (PROGN (SETQ |j| (CAR |bfVar#12|)) NIL)) (RETURN (NREVERSE |bfVar#13|))) (#1=(QUOTE T) (SETQ |bfVar#13| (CONS (CONS |i| |j|) |bfVar#13|)))) (SETQ |bfVar#11| (CDR |bfVar#11|)) (SETQ |bfVar#12| (CDR |bfVar#12|)))) NIL |nargl| NIL |sgargl| NIL)) (SETQ |body| (SUBLIS |sb| |body|)) (SETQ |sb2| ((LAMBDA (|bfVar#16| |bfVar#14| |i| |bfVar#15| |j|) (LOOP (COND ((OR (ATOM |bfVar#14|) (PROGN (SETQ |i| (CAR |bfVar#14|)) NIL) (ATOM |bfVar#15|) (PROGN (SETQ |j| (CAR |bfVar#15|)) NIL)) (RETURN (NREVERSE |bfVar#16|))) (#1# (SETQ |bfVar#16| (CONS (LIST (QUOTE CONS) (LIST (QUOTE QUOTE) |i|) |j|) |bfVar#16|)))) (SETQ |bfVar#14| (CDR |bfVar#14|)) (SETQ |bfVar#15| (CDR |bfVar#15|)))) NIL |sgargl| NIL |largl| NIL)) (SETQ |body| (LIST (QUOTE SUBLIS) (CONS (QUOTE LIST) |sb2|) (LIST (QUOTE QUOTE) |body|))) (SETQ |lamex| (LIST (QUOTE MLAMBDA) |gargl| |body|)) (SETQ |def| (LIST |op| |lamex|)) (|bfTuple| (CONS (|shoeComp| |def|) ((LAMBDA (|bfVar#18| |bfVar#17| |d|) (LOOP (COND ((OR (ATOM |bfVar#17|) (PROGN (SETQ |d| (CAR |bfVar#17|)) NIL)) (RETURN (NREVERSE |bfVar#18|))) (#1# (SETQ |bfVar#18| (APPEND (REVERSE (|shoeComps| (|bfDef1| |d|))) |bfVar#18|)))) (SETQ |bfVar#17| (CDR |bfVar#17|)))) NIL |$wheredefs| NIL)))))))
(DEFUN |bfGargl| (|argl|) (PROG (|f| |d| |c| |b| |a| |LETTMP#1|) (RETURN (COND ((NULL |argl|) (LIST NIL NIL NIL NIL)) (#0=(QUOTE T) (SETQ |LETTMP#1| (|bfGargl| (CDR |argl|))) (SETQ |a| (CAR |LETTMP#1|)) (SETQ |b| (CADR . #1=(|LETTMP#1|))) (SETQ |c| (CADDR . #1#)) (SETQ |d| (CADDDR . #1#)) (COND ((EQ (CAR |argl|) (QUOTE &REST)) (LIST (CONS (CAR |argl|) |b|) |b| |c| (CONS (LIST (QUOTE CONS) (LIST (QUOTE QUOTE) (QUOTE LIST)) (CAR |d|)) (CDR |d|)))) (#0# (SETQ |f| (|bfGenSymbol|)) (LIST (CONS |f| |a|) (CONS |f| |b|) (CONS (CAR |argl|) |c|) (CONS |f| |d|)))))))))
(DEFUN |bfDef1| (|bfVar#19|) (PROG (|arglp| |control| |quotes| |LETTMP#1| |argl| |body| |args| |op| |defOp|) (RETURN (PROGN (SETQ |defOp| (CAR |bfVar#19|)) (SETQ |op| (CADR . #0=(|bfVar#19|))) (SETQ |args| (CADDR . #0#)) (SETQ |body| (CADDDR . #0#)) (SETQ |argl| (COND ((|bfTupleP| |args|) (CDR |args|)) ((QUOTE T) (LIST |args|)))) (SETQ |LETTMP#1| (|bfInsertLet| |argl| |body|)) (SETQ |quotes| (CAR |LETTMP#1|)) (SETQ |control| (CADR . #1=(|LETTMP#1|))) (SETQ |arglp| (CADDR . #1#)) (SETQ |body| (CADDDR . #1#)) (COND (|quotes| (|shoeLAM| |op| |arglp| |control| |body|)) ((QUOTE T) (LIST (LIST |op| (LIST (QUOTE LAMBDA) |arglp| |body|)))))))))
(DEFUN |shoeLAM| (|op| |args| |control| |body|) (PROG (|innerfunc| |margs|) (RETURN (PROGN (SETQ |margs| (|bfGenSymbol|)) (SETQ |innerfunc| (INTERN (CONCAT (PNAME |op|) (QUOTE |,LAM|)))) (LIST (LIST |innerfunc| (LIST (QUOTE LAMBDA) |args| |body|)) (LIST |op| (LIST (QUOTE MLAMBDA) (LIST (QUOTE &REST) |margs|) (LIST (QUOTE CONS) (LIST (QUOTE QUOTE) |innerfunc|) (LIST (QUOTE WRAP) |margs| (LIST (QUOTE QUOTE) |control|))))))))))
(DEFUN |bfDef| (|defOp| |op| |args| |body|) (PROG (|body1| |arg1| |op1| |LETTMP#1|) (DECLARE (SPECIAL |$wheredefs| |$bfClamming|)) (RETURN (COND (|$bfClamming| (PROGN (SETQ |LETTMP#1| (|shoeComp| (CAR (|bfDef1| (LIST |defOp| |op| |args| |body|))))) (SETQ |op1| (CADR . #0=(|LETTMP#1|))) (SETQ |arg1| (CADDR . #0#)) (SETQ |body1| (CDDDR . #0#)) (|bfCompHash| |op1| |arg1| |body1|))) ((QUOTE T) (|bfTuple| ((LAMBDA (|bfVar#21| |bfVar#20| |d|) (LOOP (COND ((OR (ATOM |bfVar#20|) (PROGN (SETQ |d| (CAR |bfVar#20|)) NIL)) (RETURN (NREVERSE |bfVar#21|))) ((QUOTE T) (SETQ |bfVar#21| (APPEND (REVERSE (|shoeComps| (|bfDef1| |d|))) |bfVar#21|)))) (SETQ |bfVar#20| (CDR |bfVar#20|)))) NIL (CONS (LIST |defOp| |op| |args| |body|) |$wheredefs|) NIL)))))))
(DEFUN |shoeComps| (|x|) (PROG NIL (RETURN ((LAMBDA (|bfVar#23| |bfVar#22| |def|) (LOOP (COND ((OR (ATOM |bfVar#22|) (PROGN (SETQ |def| (CAR |bfVar#22|)) NIL)) (RETURN (NREVERSE |bfVar#23|))) ((QUOTE T) (SETQ |bfVar#23| (CONS (|shoeComp| |def|) |bfVar#23|)))) (SETQ |bfVar#22| (CDR |bfVar#22|)))) NIL |x| NIL))))
(DEFUN |shoeComp| (|x|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (|shoeCompTran| (CADR |x|))) (COND ((EQCAR |a| (QUOTE LAMBDA)) (CONS (QUOTE DEFUN) (CONS (CAR |x|) (CONS (CADR |a|) (CDDR |a|))))) ((QUOTE T) (CONS (QUOTE DEFMACRO) (CONS (CAR |x|) (CONS (CADR |a|) (CDDR |a|))))))))))
(DEFUN |bfInsertLet| (|x| |body|) (PROG (|body2| |name2| |norq1| |b1| |body1| |name1| |norq| |LETTMP#1| |b| |a| |ISTMP#1|) (RETURN (COND ((NULL |x|) (LIST NIL NIL |x| |body|)) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE &REST)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |a| (CAR |ISTMP#1|)) #0=(QUOTE T))))) (COND ((AND (CONSP |a|) (EQ (CAR |a|) (QUOTE QUOTE)) (PROGN (SETQ |ISTMP#1| (CDR |a|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#1|)) #0#)))) (LIST T (QUOTE QUOTE) (LIST (QUOTE &REST) |b|) |body|)) (#1=(QUOTE T) (LIST NIL NIL |x| |body|)))) (#1# (SETQ |LETTMP#1| (|bfInsertLet1| (CAR |x|) |body|)) (SETQ |b| (CAR |LETTMP#1|)) (SETQ |norq| (CADR . #2=(|LETTMP#1|))) (SETQ |name1| (CADDR . #2#)) (SETQ |body1| (CADDDR . #2#)) (SETQ |LETTMP#1| (|bfInsertLet| (CDR |x|) |body1|)) (SETQ |b1| (CAR |LETTMP#1|)) (SETQ |norq1| (CADR . #3=(|LETTMP#1|))) (SETQ |name2| (CADDR . #3#)) (SETQ |body2| (CADDDR . #3#)) (LIST (OR |b| |b1|) (CONS |norq| |norq1|) (CONS |name1| |name2|) |body2|))))))
(DEFUN |bfInsertLet1| (|y| |body|) (PROG (|g| |b| |r| |ISTMP#2| |l| |ISTMP#1|) (RETURN (COND ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#1| (CDR |y|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |l| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |r| (CAR |ISTMP#2|)) #0=(QUOTE T))))))) (LIST NIL NIL |l| (|bfMKPROGN| (LIST (|bfLET| |r| |l|) |body|)))) ((IDENTP |y|) (LIST NIL NIL |y| |body|)) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE BVQUOTE)) (PROGN (SETQ |ISTMP#1| (CDR |y|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#1|)) #0#)))) (LIST T (QUOTE QUOTE) |b| |body|)) ((QUOTE T) (SETQ |g| (|bfGenSymbol|)) (COND ((ATOM |y|) (LIST NIL NIL |g| |body|)) ((QUOTE T) (LIST NIL NIL |g| (|bfMKPROGN| (LIST (|bfLET| (|compFluidize| |y|) |g|) |body|))))))))))
(DEFUN |shoeCompTran| (|x|) (PROG (|$dollarVars| |$locVars| |$fluidVars| |fvs| |fl| |fvars| |lvars| |body| |args| |lamtype|) (DECLARE (SPECIAL |$typings| |$dollarVars| |$fluidVars| |$locVars|)) (RETURN (PROGN (SETQ |lamtype| (CAR |x|)) (SETQ |args| (CADR |x|)) (SETQ |body| (CDDR |x|)) (SETQ |$fluidVars| NIL) (SETQ |$locVars| NIL) (SETQ |$dollarVars| NIL) (|shoeCompTran1| |body|) (SETQ |$locVars| (SETDIFFERENCE (SETDIFFERENCE |$locVars| |$fluidVars|) (|shoeATOMs| |args|))) (SETQ |body| (COND ((OR |$fluidVars| |$locVars| |$dollarVars| |$typings|) (SETQ |lvars| (APPEND |$fluidVars| |$locVars|)) (SETQ |$fluidVars| (UNION |$fluidVars| |$dollarVars|)) (COND ((NULL |$fluidVars|) (COND ((NULL |$typings|) (|shoePROG| |lvars| |body|)) (#0=(QUOTE T) (|shoePROG| |lvars| (CONS (CONS (QUOTE DECLARE) |$typings|) |body|))))) (#1=(QUOTE T) (SETQ |fvars| (LIST (QUOTE DECLARE) (CONS (QUOTE SPECIAL) |$fluidVars|))) (COND ((NULL |$typings|) (|shoePROG| |lvars| (CONS |fvars| |body|))) (#0# (|shoePROG| |lvars| (CONS |fvars| (CONS (CONS (QUOTE DECLARE) |$typings|) |body|)))))))) (#1# (|shoePROG| NIL |body|)))) (SETQ |fl| (|shoeFluids| |args|)) (SETQ |body| (COND (|fl| (SETQ |fvs| (LIST (QUOTE DECLARE) (CONS (QUOTE SPECIAL) |fl|))) (CONS |fvs| |body|)) (#1# |body|))) (CONS |lamtype| (CONS |args| |body|))))))
(DEFUN |shoePROG| (|v| |b|) (PROG (|blist| |blast| |LETTMP#1|) (RETURN (COND ((NULL |b|) (LIST (LIST (QUOTE PROG) |v|))) ((QUOTE T) (PROGN (SETQ |LETTMP#1| (REVERSE |b|)) (SETQ |blast| (CAR |LETTMP#1|)) (SETQ |blist| (NREVERSE (CDR |LETTMP#1|))) (LIST (CONS (QUOTE PROG) (CONS |v| (APPEND |blist| (CONS (LIST (QUOTE RETURN) |blast|) NIL)))))))))))
(DEFUN |shoeFluids| (|x|) (PROG NIL (RETURN (COND ((NULL |x|) NIL) ((AND (IDENTP |x|) (|bfBeginsDollar| |x|)) (LIST |x|)) ((EQCAR |x| (QUOTE QUOTE)) NIL) ((ATOM |x|) NIL) ((QUOTE T) (APPEND (|shoeFluids| (CAR |x|)) (|shoeFluids| (CDR |x|))))))))
(DEFUN |shoeATOMs| (|x|) (PROG NIL (RETURN (COND ((NULL |x|) NIL) ((ATOM |x|) (LIST |x|)) ((QUOTE T) (APPEND (|shoeATOMs| (CAR |x|)) (|shoeATOMs| (CDR |x|))))))))
(DEFUN |shoeCompTran1| (|x|) (PROG (|res| |newbindings| |r| |ISTMP#2| |l| |ISTMP#1| U) (DECLARE (SPECIAL |$fluidVars| |$locVars| |$dollarVars|)) (RETURN (COND ((ATOM |x|) (COND ((AND (IDENTP |x|) (|bfBeginsDollar| |x|)) (SETQ |$dollarVars| (COND ((MEMQ |x| |$dollarVars|) |$dollarVars|) (#0=(QUOTE T) (CONS |x| |$dollarVars|))))) (#0# NIL))) (#0# (PROGN (SETQ U (CAR |x|)) (COND ((EQ U (QUOTE QUOTE)) NIL) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |l| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |r| (CAR |ISTMP#2|)) (QUOTE T))))))) (PROGN (RPLACA |x| (QUOTE SETQ)) (|shoeCompTran1| |r|) (COND ((IDENTP |l|) (COND ((NULL (|bfBeginsDollar| |l|)) (SETQ |$locVars| (COND ((MEMQ |l| |$locVars|) |$locVars|) (#0# (CONS |l| |$locVars|))))) (#0# (SETQ |$dollarVars| (COND ((MEMQ |l| |$dollarVars|) |$dollarVars|) (#0# (CONS |l| |$dollarVars|))))))) ((EQCAR |l| (QUOTE FLUID)) (PROGN (SETQ |$fluidVars| (COND ((MEMQ (CADR |l|) |$fluidVars|) |$fluidVars|) (#0# (CONS (CADR |l|) |$fluidVars|)))) (RPLACA (CDR |x|) (CADR |l|))))))) ((MEMQ U (QUOTE (PROG LAMBDA))) (PROGN (SETQ |newbindings| NIL) ((LAMBDA (|bfVar#24| |y|) (LOOP (COND ((OR (ATOM |bfVar#24|) (PROGN (SETQ |y| (CAR |bfVar#24|)) NIL)) (RETURN NIL)) (#1=(QUOTE T) (COND ((NULL (MEMQ |y| |$locVars|)) (IDENTITY (PROGN (SETQ |$locVars| (CONS |y| |$locVars|)) (SETQ |newbindings| (CONS |y| |newbindings|)))))))) (SETQ |bfVar#24| (CDR |bfVar#24|)))) (CADR |x|) NIL) (SETQ |res| (|shoeCompTran1| (CDDR |x|))) (SETQ |$locVars| ((LAMBDA (|bfVar#26| |bfVar#25| |y|) (LOOP (COND ((OR (ATOM |bfVar#25|) (PROGN (SETQ |y| (CAR |bfVar#25|)) NIL)) (RETURN (NREVERSE |bfVar#26|))) (#1# (AND (NULL (MEMQ |y| |newbindings|)) (SETQ |bfVar#26| (CONS |y| |bfVar#26|))))) (SETQ |bfVar#25| (CDR |bfVar#25|)))) NIL |$locVars| NIL)))) (#0# (PROGN (|shoeCompTran1| (CAR |x|)) (|shoeCompTran1| (CDR |x|)))))))))))
(DEFUN |bfTagged| (|a| |b|) (PROG NIL (DECLARE (SPECIAL |$typings|)) (RETURN (COND ((IDENTP |a|) (COND ((EQ |b| (QUOTE FLUID)) (|bfLET| (|compFluid| |a|) NIL)) ((EQ |b| (QUOTE |fluid|)) (|bfLET| (|compFluid| |a|) NIL)) ((EQ |b| (QUOTE |local|)) (|bfLET| (|compFluid| |a|) NIL)) (#0=(QUOTE T) (PROGN (SETQ |$typings| (CONS (LIST (QUOTE TYPE) |b| |a|) |$typings|)) |a|)))) (#0# (LIST (QUOTE THE) |b| |a|))))))
(DEFUN |bfAssign| (|l| |r|) (PROG NIL (RETURN (COND ((|bfTupleP| |l|) (|bfSetelt| (CADR |l|) (CDDR |l|) |r|)) ((QUOTE T) (|bfLET| |l| |r|))))))
(DEFUN |bfSetelt| (|e| |l| |r|) (PROG NIL (RETURN (COND ((NULL (CDR |l|)) (|defSETELT| |e| (CAR |l|) |r|)) ((QUOTE T) (|bfSetelt| (|bfElt| |e| (CAR |l|)) (CDR |l|) |r|))))))
(DEFUN |bfElt| (|expr| |sel|) (PROG (|y|) (RETURN (PROGN (SETQ |y| (AND (SYMBOLP |sel|) (GET |sel| (QUOTE SHOESELFUNCTION)))) (COND (|y| (COND ((INTEGERP |y|) (LIST (QUOTE ELT) |expr| |y|)) (#0=(QUOTE T) (LIST |y| |expr|)))) (#0# (LIST (QUOTE ELT) |expr| |sel|)))))))
(DEFUN |defSETELT| (|var| |sel| |expr|) (PROG (|y|) (RETURN (PROGN (SETQ |y| (AND (SYMBOLP |sel|) (GET |sel| (QUOTE SHOESELFUNCTION)))) (COND (|y| (COND ((INTEGERP |y|) (LIST (QUOTE SETF) (LIST (QUOTE ELT) |var| |y|) |expr|)) (#0=(QUOTE T) (LIST (QUOTE SETF) (LIST |y| |var|) |expr|)))) (#0# (LIST (QUOTE SETF) (LIST (QUOTE ELT) |var| |sel|) |expr|)))))))
(DEFUN |bfIfThenOnly| (|a| |b|) (PROG (|b1|) (RETURN (PROGN (SETQ |b1| (COND ((EQCAR |b| (QUOTE PROGN)) (CDR |b|)) ((QUOTE T) (LIST |b|)))) (LIST (QUOTE COND) (CONS |a| |b1|))))))
(DEFUN |bfIf| (|a| |b| |c|) (PROG (|c1| |b1|) (RETURN (PROGN (SETQ |b1| (COND ((EQCAR |b| (QUOTE PROGN)) (CDR |b|)) (#0=(QUOTE T) (LIST |b|)))) (COND ((EQCAR |c| (QUOTE COND)) (CONS (QUOTE COND) (CONS (CONS |a| |b1|) (CDR |c|)))) ((QUOTE T) (PROGN (SETQ |c1| (COND ((EQCAR |c| (QUOTE PROGN)) (CDR |c|)) (#0# (LIST |c|)))) (LIST (QUOTE COND) (CONS |a| |b1|) (CONS (QUOTE (QUOTE T)) |c1|)))))))))
(DEFUN |bfExit| (|a| |b|) (PROG NIL (RETURN (LIST (QUOTE COND) (LIST |a| (LIST (QUOTE IDENTITY) |b|))))))
(DEFUN |bfMKPROGN| (|l|) (PROG (|a|) (RETURN (PROGN (SETQ |a| ((LAMBDA (|bfVar#27| |c|) (LOOP (COND ((ATOM |c|) (RETURN (NREVERSE |bfVar#27|))) ((QUOTE T) (SETQ |bfVar#27| (APPEND (REVERSE (|bfFlattenSeq| |c|)) |bfVar#27|)))) (SETQ |c| (CDR |c|)))) NIL |l|)) (COND ((NULL |a|) NIL) ((NULL (CDR |a|)) (CAR |a|)) ((QUOTE T) (CONS (QUOTE PROGN) |a|)))))))
(DEFUN |bfFlattenSeq| (|x|) (PROG (|f|) (RETURN (COND ((NULL |x|) NIL) (#0=(QUOTE T) (PROGN (SETQ |f| (CAR |x|)) (COND ((ATOM |f|) (COND ((CDR |x|) NIL) ((QUOTE T) (LIST |f|)))) ((EQCAR |f| (QUOTE PROGN)) (COND ((CDR |x|) ((LAMBDA (|bfVar#29| |bfVar#28| |i|) (LOOP (COND ((OR (ATOM |bfVar#28|) (PROGN (SETQ |i| (CAR |bfVar#28|)) NIL)) (RETURN (NREVERSE |bfVar#29|))) ((QUOTE T) (AND (NULL (ATOM |i|)) (SETQ |bfVar#29| (CONS |i| |bfVar#29|))))) (SETQ |bfVar#28| (CDR |bfVar#28|)))) NIL (CDR |f|) NIL)) (#0# (CDR |f|)))) (#0# (LIST |f|)))))))))
(DEFUN |bfSequence| (|l|) (PROG (|f| |aft| |before| |no| |transform| |b| |ISTMP#5| |ISTMP#4| |ISTMP#3| |a| |ISTMP#2| |ISTMP#1|) (RETURN (COND ((NULL |l|) NIL) (#0=(QUOTE T) (PROGN (SETQ |transform| ((LAMBDA (|bfVar#31| |bfVar#30| |x|) (LOOP (COND ((OR (ATOM |bfVar#30|) (PROGN (SETQ |x| (CAR |bfVar#30|)) NIL) (NOT (AND (CONSP |x|) (EQ (CAR |x|) (QUOTE COND)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |ISTMP#2| (CAR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |a| (CAR |ISTMP#2|)) (SETQ |ISTMP#3| (CDR |ISTMP#2|)) (AND (CONSP |ISTMP#3|) (EQ (CDR |ISTMP#3|) NIL) (PROGN (SETQ |ISTMP#4| (CAR |ISTMP#3|)) (AND (CONSP |ISTMP#4|) (EQ (CAR |ISTMP#4|) (QUOTE IDENTITY)) (PROGN (SETQ |ISTMP#5| (CDR |ISTMP#4|)) (AND (CONSP |ISTMP#5|) (EQ (CDR |ISTMP#5|) NIL) (PROGN (SETQ |b| (CAR |ISTMP#5|)) (QUOTE T))))))))))))))) (RETURN (NREVERSE |bfVar#31|))) ((QUOTE T) (SETQ |bfVar#31| (CONS (LIST |a| |b|) |bfVar#31|)))) (SETQ |bfVar#30| (CDR |bfVar#30|)))) NIL |l| NIL)) (SETQ |no| (LENGTH |transform|)) (SETQ |before| (|bfTake| |no| |l|)) (SETQ |aft| (|bfDrop| |no| |l|)) (COND ((NULL |before|) (COND ((NULL (CDR |l|)) (PROGN (SETQ |f| (CAR |l|)) (COND ((EQCAR |f| (QUOTE PROGN)) (|bfSequence| (CDR |f|))) ((QUOTE T) |f|)))) (#0# (|bfMKPROGN| (LIST (CAR |l|) (|bfSequence| (CDR |l|))))))) ((NULL |aft|) (CONS (QUOTE COND) |transform|)) (#0# (CONS (QUOTE COND) (APPEND |transform| (CONS (LIST (QUOTE (QUOTE T)) (|bfSequence| |aft|)) NIL)))))))))))
(DEFUN |bfWhere| (|context| |expr|) (PROG (|a| |body| |ISTMP#3| |args| |ISTMP#2| |op| |ISTMP#1| |def| |nondefs| |defs| |opassoc| |LETTMP#1|) (DECLARE (SPECIAL |$wheredefs|)) (RETURN (PROGN (SETQ |LETTMP#1| (|defSheepAndGoats| |context|)) (SETQ |opassoc| (CAR |LETTMP#1|)) (SETQ |defs| (CADR . #0=(|LETTMP#1|))) (SETQ |nondefs| (CADDR . #0#)) (SETQ |a| ((LAMBDA (|bfVar#33| |bfVar#32| |d|) (LOOP (COND ((OR (ATOM |bfVar#32|) (PROGN (SETQ |d| (CAR |bfVar#32|)) NIL)) (RETURN (NREVERSE |bfVar#33|))) ((QUOTE T) (AND (CONSP |d|) (PROGN (SETQ |def| (CAR |d|)) (SETQ |ISTMP#1| (CDR |d|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |op| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |args| (CAR |ISTMP#2|)) (SETQ |ISTMP#3| (CDR |ISTMP#2|)) (AND (CONSP |ISTMP#3|) (EQ (CDR |ISTMP#3|) NIL) (PROGN (SETQ |body| (CAR |ISTMP#3|)) (QUOTE T)))))))) (SETQ |bfVar#33| (CONS (LIST |def| |op| |args| (|bfSUBLIS| |opassoc| |body|)) |bfVar#33|))))) (SETQ |bfVar#32| (CDR |bfVar#32|)))) NIL |defs| NIL)) (SETQ |$wheredefs| (APPEND |a| |$wheredefs|)) (|bfMKPROGN| (|bfSUBLIS| |opassoc| (NCONC |nondefs| (LIST |expr|))))))))
(DEFUN |bfReadLisp| (|string|) (PROG NIL (RETURN (|bfTuple| (|shoeReadLispString| |string| 0)))))
(DEFUN |shoeReadLispString| (|s| |n|) (PROG (|ind| |exp| |LETTMP#1|) (RETURN (COND ((NOT (< |n| (LENGTH |s|))) NIL) (#0=(QUOTE T) (PROGN (SETQ |LETTMP#1| (|shoeReadLisp| |s| |n|)) (SETQ |exp| (CAR |LETTMP#1|)) (SETQ |ind| (CADR |LETTMP#1|)) (COND ((NULL |exp|) NIL) (#0# (CONS |exp| (|shoeReadLispString| |s| |ind|))))))))))
(DEFUN |bfCompHash| (|op| |argl| |body|) (PROG (|computeFunction| |auxfn|) (RETURN (PROGN (SETQ |auxfn| (INTERN (CONCAT (PNAME |op|) ";"))) (SETQ |computeFunction| (CONS (QUOTE DEFUN) (CONS |auxfn| (CONS |argl| |body|)))) (|bfTuple| (CONS |computeFunction| (|bfMain| |auxfn| |op|)))))))
(DEFUN |bfMain| (|auxfn| |op|) (PROG (|cacheVector| |cacheCountCode| |cacheResetCode| |cacheType| |mainFunction| |codeBody| |thirdPredPair| |putCode| |secondPredPair| |getCode| |g2| |cacheName| |computeValue| |arg| |g1|) (RETURN (PROGN (SETQ |g1| (|bfGenSymbol|)) (SETQ |arg| (LIST (QUOTE &REST) |g1|)) (SETQ |computeValue| (LIST (QUOTE APPLY) (LIST (QUOTE FUNCTION) |auxfn|) |g1|)) (SETQ |cacheName| (INTERN (CONCAT (PNAME |op|) ";AL"))) (SETQ |g2| (|bfGenSymbol|)) (SETQ |getCode| (LIST (QUOTE GETHASH) |g1| |cacheName|)) (SETQ |secondPredPair| (LIST (LIST (QUOTE SETQ) |g2| |getCode|) |g2|)) (SETQ |putCode| (LIST (QUOTE SETF) |getCode| |computeValue|)) (SETQ |thirdPredPair| (LIST (QUOTE (QUOTE T)) |putCode|)) (SETQ |codeBody| (LIST (QUOTE PROG) (LIST |g2|) (LIST (QUOTE RETURN) (LIST (QUOTE COND) |secondPredPair| |thirdPredPair|)))) (SETQ |mainFunction| (LIST (QUOTE DEFUN) |op| |arg| |codeBody|)) (SETQ |cacheType| (QUOTE |hash-table|)) (SETQ |cacheResetCode| (LIST (QUOTE SETQ) |cacheName| (LIST (QUOTE MAKE-HASHTABLE) (LIST (QUOTE QUOTE) (QUOTE UEQUAL))))) (SETQ |cacheCountCode| (LIST (QUOTE |hashCount|) |cacheName|)) (SETQ |cacheVector| (LIST |op| |cacheName| |cacheType| |cacheResetCode| |cacheCountCode|)) (LIST |mainFunction| (|shoeEVALANDFILEACTQ| (LIST (QUOTE SETF) (LIST (QUOTE GET) (LIST (QUOTE QUOTE) |op|) (LIST (QUOTE QUOTE) (QUOTE |cacheInfo|))) (LIST (QUOTE QUOTE) |cacheVector|))) (|shoeEVALANDFILEACTQ| |cacheResetCode|))))))
