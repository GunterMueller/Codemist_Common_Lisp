
;  Copyright (c) 1991-2002, The Numerical Algorithms Group Ltd.
;  All rights reserved.
;  
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  
;      - Redistributions of source code must retain the above copyright
;        notice, this list of conditions and the following disclaimer.
;  
;      - Redistributions in binary form must reproduce the above copyright
;        notice, this list of conditions and the following disclaimer in
;        the documentation and/or other materials provided with the
;        distribution.
;  
;      - Neither the name of The Numerical ALgorithms Group Ltd. nor the
;        names of its contributors may be used to endorse or promote products
;        derived from this software without specific prior written permission.
;  
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES-- LOSS OF USE, DATA, OR
;  PROFITS-- OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(IN-PACKAGE (QUOTE BOOTTRAN))
(DEFUN BOOTTOCL (|fn|) (PROG (|$bfClamming| |a|) (DECLARE (SPECIAL |$bfClamming|)) (RETURN (PROGN (SETQ |a|  *PACKAGE*) (IN-PACKAGE (QUOTE BOOTTRAN)) (SETQ |$bfClamming| NIL) (BOOTTOCLLINES NIL |fn|) (setq *PACKAGE* |a|)))))
(DEFUN BOOTCLAM (|fn|) (PROG NIL (RETURN (BOOTCLAMLINES NIL |fn|))))
(DEFUN BOOTCLAMLINES (|lines| |fn|) (PROG (|$bfClamming|) (DECLARE (SPECIAL |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| T) (BOOTTOCLLINES |lines| |fn|)))))
(DEFUN BOOTTOCLLINES (|lines| |fn|) (PROG (|outfn| |infn|) (RETURN (PROGN (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (SETQ |outfn| (CONCAT (|shoeRemovebootIfNec| |fn|) ".clisp")) (|shoeOpenInputFile| |a| |infn| (|shoeClLines| |a| |fn| |lines| |outfn|))))))
(DEFUN |shoeClLines| (|a| |fn| |lines| |outfn|) (PROG (|$GenVarCounter|) (DECLARE (SPECIAL |$GenVarCounter|)) (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|) NIL) ((QUOTE T) (SETQ |$GenVarCounter| 0) (|shoeOpenOutputFile| |stream| |outfn| (PROGN ((LAMBDA (|bfVar#1| |line|) (LOOP (COND ((OR (ATOM |bfVar#1|) (PROGN (SETQ |line| (CAR |bfVar#1|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeFileLine| |line| |stream|))) (SETQ |bfVar#1| (CDR |bfVar#1|)))) |lines| NIL) (|shoeFileTrees| (|shoeTransformStream| |a|) |stream|))) (|shoeConsole| (CONCAT |outfn| " PRODUCED")))))))
(DEFUN BOOTTOCLC (|fn|) (PROG NIL (RETURN (BOOTTOCLCLINES NIL |fn|))))
(DEFUN BOOTTOCLCLINES (|lines| |fn|) (PROG (|$bfClamming| |outfn| |infn|) (DECLARE (SPECIAL |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| NIL) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (SETQ |outfn| (|shoeRemovebootIfNec| |fn|)) (|shoeOpenInputFile| |a| |infn| (|shoeClCLines| |a| |fn| |lines| (CONCAT |outfn| ".clisp")))))))
(DEFUN |shoeClCLines| (|a| |fn| |lines| |outfn|) (PROG (|$GenVarCounter|) (DECLARE (SPECIAL |$GenVarCounter|)) (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|)) ((QUOTE T) (SETQ |$GenVarCounter| 0) (|shoeOpenOutputFile| |stream| |outfn| (PROGN ((LAMBDA (|bfVar#2| |line|) (LOOP (COND ((OR (ATOM |bfVar#2|) (PROGN (SETQ |line| (CAR |bfVar#2|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeFileLine| |line| |stream|))) (SETQ |bfVar#2| (CDR |bfVar#2|)))) |lines| NIL) (|shoeFileTrees| (|shoeTransformToFile| |stream| (|shoeInclude| (|bAddLineNumber| (|bRgen| |a|) (|bIgen| 0)))) |stream|))) (|shoeConsole| (CONCAT |outfn| " PRODUCED")))))))
(DEFUN BOOTTOMC (|fn|) (PROG (|$GenVarCounter| |$bfClamming| |infn|) (DECLARE (SPECIAL |$GenVarCounter| |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| NIL) (SETQ |$GenVarCounter| 0) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (|shoeOpenInputFile| |a| |infn| (|shoeMc| |a| |fn|))))))
(DEFUN |shoeMc| (|a| |fn|) (PROG NIL (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|)) ((QUOTE T) (|shoePCompileTrees| (|shoeTransformStream| |a|)) (|shoeConsole| (CONCAT |fn| " COMPILED AND LOADED")))))))
(DEFUN COMPILE-BOOT-FILE (|fn|) (PROG NIL (RETURN (BOOT |fn|))))
(DEFUN BOOT (|fn|) (PROG (|$bfClamming| |outbin| |outfn| |a|) (DECLARE (SPECIAL |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| NIL) (SETQ |a| (BOOTTOCL |fn|)) (COND ((NULL |a|) NIL) ((QUOTE T) (PROGN (SETQ |outfn| (CONCAT (|shoeRemovebootIfNec| |fn|) ".clisp")) (|shoeCOMPILE-FILE| |outfn|) (SETQ |outbin| (CONCAT (|shoeRemovebootIfNec| |fn|) "." *LISP-BIN-FILETYPE*)) (LOAD |outbin|))))))))
(DEFUN EVAL-BOOT-FILE (|fn|) (PROG (|$bfClamming| |outfn| |infn| |b|) (DECLARE (SPECIAL |$bfClamming|)) (RETURN (PROGN (SETQ |b|  *PACKAGE*) (IN-PACKAGE (QUOTE BOOTTRAN)) (SETQ |$bfClamming| NIL) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (SETQ |outfn| (CONCAT (|shoeRemovebootIfNec| |fn|) "." *LISP-SOURCE-FILETYPE*)) (|shoeOpenInputFile| |a| |infn| (|shoeClLines| |a| |infn| NIL |outfn|)) (setq *package* |b|) (LOAD |outfn|)))))
(DEFUN BO (|fn|) (PROG (|$bfClamming| |$GenVarCounter| |infn| |b|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |b| *PACKAGE*) (IN-PACKAGE (QUOTE BOOTTRAN)) (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (|shoeOpenInputFile| |a| |infn| (|shoeToConsole| |a| |fn|)) (setq *package* |b|)))))
(DEFUN BOCLAM (|fn|) (PROG (|$bfClamming| |$GenVarCounter| |infn|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| T) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (|shoeOpenInputFile| |a| |infn| (|shoeToConsole| |a| |fn|))))))
(DEFUN |shoeToConsole| (|a| |fn|) (PROG NIL (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|)) ((QUOTE T) (|shoeConsoleTrees| (|shoeTransformToConsole| (|shoeInclude| (|bAddLineNumber| (|bRgen| |a|) (|bIgen| 0))))))))))
(DEFUN STOUT (|string|) (PROG NIL (RETURN (PSTOUT (LIST |string|)))))
(DEFUN STEVAL (|string|) (PROG (|$bfClamming| |$GenVarCounter| |fn| |a|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (SETQ |a| (|shoeTransformString| (LIST |string|))) (COND ((|bStreamPackageNull| |a|) NIL) ((QUOTE T) (SETQ |fn| (|stripm| (CAR |a|) *PACKAGE* (FIND-PACKAGE "BOOTTRAN"))) (EVAL |fn|)))))))
(DEFUN STTOMC (|string|) (PROG (|$bfClamming| |$GenVarCounter| |a|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (SETQ |a| (|shoeTransformString| (LIST |string|))) (COND ((|bStreamPackageNull| |a|) NIL) ((QUOTE T) (|shoePCompile| (CAR |a|))))))))
(DEFUN |shoeCompileTrees| (|s|) (PROG NIL (RETURN ((LAMBDA NIL (LOOP (COND ((|bStreamNull| |s|) (RETURN NIL)) ((QUOTE T) (PROGN (|shoeCompile| (CAR |s|)) (SETQ |s| (CDR |s|)))))))))))
(DEFUN |shoeCompile| (|fn|) (PROG (|body| |bv| |ISTMP#2| |name| |ISTMP#1|) (RETURN (COND ((AND (CONSP |fn|) (EQ (CAR |fn|) (QUOTE DEFUN)) (PROGN (SETQ |ISTMP#1| (CDR |fn|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |name| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |bv| (CAR |ISTMP#2|)) (SETQ |body| (CDR |ISTMP#2|)) (QUOTE T))))))) (COMPILE |name| (CONS (QUOTE LAMBDA) (CONS |bv| |body|)))) ((QUOTE T) (EVAL |fn|))))))
(DEFUN |shoeNotFound| (|fn|) (PROG NIL (RETURN (|shoeConsole| (CONCAT |fn| " NOT FOUND")))))
(DEFUN |shoeTransform| (|str|) (PROG NIL (RETURN (|bNext| (FUNCTION |shoeTreeConstruct|) (|bNext| (FUNCTION |shoePileInsert|) (|bNext| (FUNCTION |shoeLineToks|) |str|))))))
(DEFUN |shoeTransformString| (|s|) (PROG NIL (RETURN (|shoeTransform| (|shoeInclude| (|bAddLineNumber| |s| (|bIgen| 0)))))))
(DEFUN |shoeTransformStream| (|s|) (PROG NIL (RETURN (|shoeTransformString| (|bRgen| |s|)))))
(DEFUN |shoeTransformToConsole| (|str|) (PROG NIL (RETURN (|bNext| (FUNCTION |shoeConsoleItem|) (|bNext| (FUNCTION |shoePileInsert|) (|bNext| (FUNCTION |shoeLineToks|) |str|))))))
(DEFUN |shoeTransformToFile| (|fn| |str|) (PROG NIL (RETURN (|bFileNext| |fn| (|bNext| (FUNCTION |shoePileInsert|) (|bNext| (FUNCTION |shoeLineToks|) |str|))))))
(DEFUN |shoeConsoleItem| (|str|) (PROG (|dq|) (RETURN (PROGN (SETQ |dq| (CAR |str|)) (|shoeConsoleLines| (|shoeDQlines| |dq|)) (CONS (|shoeParseTrees| |dq|) (CDR |str|))))))
(DEFUN |bFileNext| (|fn| |s|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bFileNext1|) (LIST |fn| |s|)))))
(DEFUN |bFileNext1| (|fn| |s|) (PROG (|dq|) (RETURN (COND ((|bStreamNull| |s|) (LIST (QUOTE |nullstream|))) ((QUOTE T) (PROGN (SETQ |dq| (CAR |s|)) (|shoeFileLines| (|shoeDQlines| |dq|) |fn|) (|bAppend| (|shoeParseTrees| |dq|) (|bFileNext| |fn| (CDR |s|)))))))))
(DEFUN |shoeParseTrees| (|dq|) (PROG (|toklist|) (RETURN (PROGN (SETQ |toklist| (|dqToList| |dq|)) (COND ((NULL |toklist|) NIL) ((QUOTE T) (|shoeOutParse| |toklist|)))))))
(DEFUN |shoeTreeConstruct| (|str|) (PROG NIL (RETURN (CONS (|shoeParseTrees| (CAR |str|)) (CDR |str|)))))
(DEFUN |shoeDQlines| (|dq|) (PROG (|b| |a|) (RETURN (PROGN (SETQ |a| (CDAAR (|shoeLastTokPosn| |dq|))) (SETQ |b| (CDAAR (|shoeFirstTokPosn| |dq|))) (|streamTake| (+ (- |a| |b|) 1) (CAR (|shoeFirstTokPosn| |dq|)))))))
(DEFUN |streamTake| (|n| |s|) (PROG NIL (RETURN (COND ((|bStreamNull| |s|) NIL) ((EQL |n| 0) NIL) ((QUOTE T) (CONS (CAR |s|) (|streamTake| (- |n| 1) (CDR |s|))))))))
(DEFUN |shoeFileLines| (|lines| |fn|) (PROG NIL (RETURN (PROGN (|shoeFileLine| " " |fn|) ((LAMBDA (|bfVar#3| |line|) (LOOP (COND ((OR (ATOM |bfVar#3|) (PROGN (SETQ |line| (CAR |bfVar#3|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeFileLine| (|shoeAddComment| |line|) |fn|))) (SETQ |bfVar#3| (CDR |bfVar#3|)))) |lines| NIL) (|shoeFileLine| " " |fn|)))))
(DEFUN |shoeConsoleLines| (|lines|) (PROG NIL (RETURN (PROGN (|shoeConsole| " ") ((LAMBDA (|bfVar#4| |line|) (LOOP (COND ((OR (ATOM |bfVar#4|) (PROGN (SETQ |line| (CAR |bfVar#4|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeConsole| (|shoeAddComment| |line|)))) (SETQ |bfVar#4| (CDR |bfVar#4|)))) |lines| NIL) (|shoeConsole| " ")))))
(DEFUN |shoeFileLine| (|x| |stream|) (PROG NIL (RETURN (PROGN (WRITE-LINE |x| |stream|) |x|))))
(DEFUN |shoeFileTrees| (|s| |st|) (PROG (|a|) (RETURN ((LAMBDA NIL (LOOP (COND ((|bStreamNull| |s|) (RETURN NIL)) ((QUOTE T) (PROGN (SETQ |a| (CAR |s|)) (COND ((EQCAR |a| (QUOTE +LINE)) (|shoeFileLine| (CADR |a|) |st|)) ((QUOTE T) (|shoePPtoFile| |a| |st|))) (SETQ |s| (CDR |s|)))))))))))
(DEFUN |shoePPtoFile| (|x| |stream|) (PROG NIL (RETURN (PROGN (SHOENOTPRETTYPRINT |x| |stream|) |x|))))
(DEFUN |shoeConsoleTrees| (|s|) (PROG (|fn|) (RETURN ((LAMBDA NIL (LOOP (COND ((|bStreamPackageNull| |s|) (RETURN NIL)) ((QUOTE T) (PROGN (SETQ |fn| (|stripm| (CAR |s|) *PACKAGE* (FIND-PACKAGE "BOOTTRAN"))) (REALLYPRETTYPRINT |fn|) (SETQ |s| (CDR |s|)))))))))))
(DEFUN |shoeAddComment| (|l|) (PROG NIL (RETURN (CONCAT "; " (CAR |l|)))))
(DEFUN |shoeOutParse| (|stream|) (PROG (|$bpParenCount| |$bpCount| |$returns| |$typings| |$wheredefs| |$op| |$ttok| |$stok| |$stack| |$inputStream| |found|) (DECLARE (SPECIAL |$bpParenCount| |$bpCount| |$returns| |$typings| |$wheredefs| |$op| |$ttok| |$stok| |$stack| |$inputStream|)) (RETURN (PROGN (SETQ |$inputStream| |stream|) (SETQ |$stack| NIL) (SETQ |$stok| NIL) (SETQ |$ttok| NIL) (SETQ |$op| NIL) (SETQ |$wheredefs| NIL) (SETQ |$typings| NIL) (SETQ |$returns| NIL) (SETQ |$bpCount| 0) (SETQ |$bpParenCount| 0) (|bpFirstTok|) (SETQ |found| (CATCH (QUOTE TRAPPOINT) (|bpOutItem|))) (COND ((EQ |found| (QUOTE TRAPPED)) NIL) ((NULL (|bStreamNull| |$inputStream|)) (|bpGeneralErrorHere|) NIL) ((NULL |$stack|) (|bpGeneralErrorHere|) NIL) ((QUOTE T) (CAR |$stack|)))))))
(DEFUN |bpOutItem| NIL (PROG (|r| |ISTMP#2| |l| |ISTMP#1| |b|) (RETURN (PROGN (OR (|bpComma|) (|bpTrap|)) (SETQ |b| (|bpPop1|)) (COND ((EQCAR |b| (QUOTE TUPLE)) (|bpPush| (CDR |b|))) ((EQCAR |b| (QUOTE +LINE)) (|bpPush| (LIST |b|))) ((AND (CONSP |b|) (EQ (CAR |b|) (QUOTE L%T)) (PROGN (SETQ |ISTMP#1| (CDR |b|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |l| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |r| (CAR |ISTMP#2|)) (QUOTE T)))))) (IDENTP |l|)) (|bpPush| (LIST (|shoeEVALANDFILEACTQ| (LIST (QUOTE SETQ) |l| |r|))))) ((QUOTE T) (PROGN (SETQ |b| (|shoeCompTran| (LIST (QUOTE LAMBDA) (LIST (QUOTE |x|)) |b|))) (|bpPush| (LIST (|shoeEVALANDFILEACTQ| (CADDR |b|)))))))))))
(DEFUN |shoeEVALANDFILEACTQ| (|x|) (PROG NIL (RETURN (LIST (QUOTE EVAL-WHEN) (LIST (QUOTE EVAL) (QUOTE LOAD)) |x|))))
(DEFUN |SoftShoeError| (|posn| |key|) (PROG NIL (RETURN (PROGN (|shoeConsole| (CONCAT "ERROR IN LINE " (STRINGIMAGE (|lineNo| |posn|)))) (|shoeConsole| (|lineString| |posn|)) (|shoeConsole| (CONCAT (|shoeSpaces| (|lineCharacter| |posn|)) "|")) (|shoeConsole| |key|)))))
(DEFUN |shoeSpaces| (|n|) (PROG NIL (RETURN (MAKE-FULL-CVEC |n| "."))))
(DEFUN |bpIgnoredFromTo| (|pos1| |pos2|) (PROG NIL (RETURN (PROGN (|shoeConsole| (CONCAT "ignored from line " (STRINGIMAGE (|lineNo| |pos1|)))) (|shoeConsole| (|lineString| |pos1|)) (|shoeConsole| (CONCAT (|shoeSpaces| (|lineCharacter| |pos1|)) "|")) (|shoeConsole| (CONCAT "ignored through line " (STRINGIMAGE (|lineNo| |pos2|)))) (|shoeConsole| (|lineString| |pos2|)) (|shoeConsole| (CONCAT (|shoeSpaces| (|lineCharacter| |pos2|)) "|"))))))
(DEFUN |lineNo| (|p|) (PROG NIL (RETURN (CDAAR |p|))))
(DEFUN |lineString| (|p|) (PROG NIL (RETURN (CAAAR |p|))))
(DEFUN |lineCharacter| (|p|) (PROG NIL (RETURN (CDR |p|))))
(DEFUN |bStreamNull| (|x|) (PROG (|st|) (RETURN (COND ((OR (NULL |x|) (EQCAR |x| (QUOTE |nullstream|))) T) ((QUOTE T) (PROGN ((LAMBDA NIL (LOOP (COND ((NOT (EQCAR |x| (QUOTE |nonnullstream|))) (RETURN NIL)) ((QUOTE T) (PROGN (SETQ |st| (APPLY (CADR |x|) (CDDR |x|))) (RPLACA |x| (CAR |st|)) (RPLACD |x| (CDR |st|)))))))) (EQCAR |x| (QUOTE |nullstream|))))))))
(DEFUN |bDelay| (|f| |x|) (PROG NIL (RETURN (CONS (QUOTE |nonnullstream|) (CONS |f| |x|)))))
(DEFUN |bAppend| (|x| |y|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bAppend1|) (LIST |x| |y|)))))
(DEFUN |bAppend1| (&REST |z|) (PROG NIL (RETURN (COND ((|bStreamNull| (CAR |z|)) (COND ((|bStreamNull| (CADR |z|)) (LIST (QUOTE |nullstream|))) (#0=(QUOTE T) (CADR |z|)))) (#0# (CONS (CAAR |z|) (|bAppend| (CDAR |z|) (CADR |z|))))))))
(DEFUN |bMap| (|f| |x|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bMap1|) (LIST |f| |x|)))))
(DEFUN |bMap1| (&REST |z|) (PROG (|x| |f|) (RETURN (PROGN (SETQ |f| (CAR |z|)) (SETQ |x| (CADR |z|)) (COND ((|bStreamNull| |x|) |bStreamNil|) ((QUOTE T) (CONS (FUNCALL |f| (CAR |x|)) (|bMap| |f| (CDR |x|)))))))))
(DEFUN |bNext| (|f| |s|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bNext1|) (LIST |f| |s|)))))
(DEFUN |bNext1| (|f| |s|) (PROG (|h|) (RETURN (COND ((|bStreamNull| |s|) (LIST (QUOTE |nullstream|))) ((QUOTE T) (PROGN (SETQ |h| (APPLY |f| (LIST |s|))) (|bAppend| (CAR |h|) (|bNext| |f| (CDR |h|)))))))))
(DEFUN |bRgen| (|s|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bRgen1|) (LIST |s|)))))
(DEFUN |bRgen1| (&REST |s|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (|shoeread-line| (CAR |s|))) (COND ((|shoePLACEP| |a|) (LIST (QUOTE |nullstream|))) ((QUOTE T) (CONS |a| (|bRgen| (CAR |s|)))))))))
(DEFUN |bIgen| (|n|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bIgen1|) (LIST |n|)))))
(DEFUN |bIgen1| (&REST |n|) (PROG NIL (RETURN (PROGN (SETQ |n| (+ (CAR |n|) 1)) (CONS |n| (|bIgen| |n|))))))
(DEFUN |bAddLineNumber| (|f1| |f2|) (PROG NIL (RETURN (|bDelay| (FUNCTION |bAddLineNumber1|) (LIST |f1| |f2|)))))
(DEFUN |bAddLineNumber1| (&REST |f|) (PROG (|f2| |f1|) (RETURN (PROGN (SETQ |f1| (CAR |f|)) (SETQ |f2| (CADR |f|)) (COND ((|bStreamNull| |f1|) (LIST (QUOTE |nullstream|))) ((|bStreamNull| |f2|) (LIST (QUOTE |nullstream|))) ((QUOTE T) (CONS (CONS (CAR |f1|) (CAR |f2|)) (|bAddLineNumber| (CDR |f1|) (CDR |f2|)))))))))
(DEFUN |shoeAddbootIfNec| (|s|) (PROG NIL (RETURN (|shoeAddStringIfNec| ".boot" |s|))))
(DEFUN |shoeRemovebootIfNec| (|s|) (PROG NIL (RETURN (|shoeRemoveStringIfNec| ".boot" |s|))))
(DEFUN |shoeAddStringIfNec| (|str| |s|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (STRPOS |str| |s| 0 NIL)) (COND ((NULL |a|) (CONCAT |s| |str|)) ((QUOTE T) |s|))))))
(DEFUN |shoeRemoveStringIfNec| (|str| |s|) (PROG (|a|) (RETURN (PROGN (SETQ |a| (STRPOS |str| |s| 0 NIL)) (COND ((NULL |a|) |s|) ((QUOTE T) (SUBSTRING |s| 0 |a|)))))))
(DEFUN DEFUSE (|fn|) (PROG (|infn|) (RETURN (PROGN (SETQ |infn| (CONCAT |fn| ".boot")) (|shoeOpenInputFile| |a| |infn| (|shoeDfu| |a| |fn|))))))
(DEFUN |shoeDfu| (|a| |fn|) (PROG (|$bfClamming| |$GenVarCounter| |$bootDefinedTwice| |$bootUsed| |$bootDefined| |$lispWordTable| |out|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter| |$bootDefinedTwice| |$bootUsed| |$bootDefined| |$lispWordTable|)) (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|)) ((QUOTE T) (SETQ |$lispWordTable| (MAKE-HASHTABLE (QUOTE EQ))) (DO-SYMBOLS (|i| (FIND-PACKAGE (QUOTE LISP))) (HPUT |$lispWordTable| |i| T)) (SETQ |$bootDefined| (MAKE-HASHTABLE (QUOTE EQ))) (SETQ |$bootUsed| (MAKE-HASHTABLE (QUOTE EQ))) (SETQ |$bootDefinedTwice| NIL) (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (|shoeDefUse| (|shoeTransformStream| |a|)) (SETQ |out| (CONCAT |fn| ".defuse")) (|shoeOpenOutputFile| |stream| |out| (|shoeReport| |stream|)) (|shoeConsole| (CONCAT |out| " PRODUCED")))))))
(DEFUN |shoeReport| (|stream|) (PROG (|b| |a|) (DECLARE (SPECIAL |$bootDefinedTwice| |$bootDefined| |$bootUsed|)) (RETURN (PROGN (|shoeFileLine| "DEFINED and not USED" |stream|) (SETQ |a| ((LAMBDA (|bfVar#6| |bfVar#5| |i|) (LOOP (COND ((OR (ATOM |bfVar#5|) (PROGN (SETQ |i| (CAR |bfVar#5|)) NIL)) (RETURN (NREVERSE |bfVar#6|))) (#0=(QUOTE T) (AND (NULL (GETHASH |i| |$bootUsed|)) (SETQ |bfVar#6| (CONS |i| |bfVar#6|))))) (SETQ |bfVar#5| (CDR |bfVar#5|)))) NIL (HKEYS |$bootDefined|) NIL)) (|bootOut| (SSORT |a|) |stream|) (|shoeFileLine| "             " |stream|) (|shoeFileLine| "DEFINED TWICE" |stream|) (|bootOut| (SSORT |$bootDefinedTwice|) |stream|) (|shoeFileLine| "             " |stream|) (|shoeFileLine| "USED and not DEFINED" |stream|) (SETQ |a| ((LAMBDA (|bfVar#8| |bfVar#7| |i|) (LOOP (COND ((OR (ATOM |bfVar#7|) (PROGN (SETQ |i| (CAR |bfVar#7|)) NIL)) (RETURN (NREVERSE |bfVar#8|))) (#0# (AND (NULL (GETHASH |i| |$bootDefined|)) (SETQ |bfVar#8| (CONS |i| |bfVar#8|))))) (SETQ |bfVar#7| (CDR |bfVar#7|)))) NIL (HKEYS |$bootUsed|) NIL)) ((LAMBDA (|bfVar#9| |i|) (LOOP (COND ((OR (ATOM |bfVar#9|) (PROGN (SETQ |i| (CAR |bfVar#9|)) NIL)) (RETURN NIL)) (#0# (PROGN (SETQ |b| (CONCAT (PNAME |i|) " is used in ")) (|bootOutLines| (SSORT (GETHASH |i| |$bootUsed|)) |stream| |b|)))) (SETQ |bfVar#9| (CDR |bfVar#9|)))) (SSORT |a|) NIL)))))
(DEFUN |shoeDefUse| (|s|) (PROG NIL (RETURN ((LAMBDA NIL (LOOP (COND ((|bStreamPackageNull| |s|) (RETURN NIL)) ((QUOTE T) (PROGN (|defuse| NIL (CAR |s|)) (SETQ |s| (CDR |s|)))))))))))
(DEFUN |defuse| (|e| |x|) (PROG (|$used| |niens| |nee| |LETTMP#1| |exp| |ISTMP#5| |id| |ISTMP#4| |ISTMP#3| |body| |bv| |ISTMP#2| |name| |ISTMP#1|) (DECLARE (SPECIAL |$used| |$bootUsed| |$bootDefinedTwice| |$bootDefined|)) (RETURN (PROGN (SETQ |x| (|stripm| |x| *PACKAGE* (FIND-PACKAGE "BOOTTRAN"))) (SETQ |$used| NIL) (SETQ |LETTMP#1| (COND ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE DEFUN)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |name| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |bv| (CAR |ISTMP#2|)) (SETQ |body| (CDR |ISTMP#2|)) #0=(QUOTE T))))))) (LIST |name| (CONS (QUOTE LAMBDA) (CONS |bv| |body|)))) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE DEFMACRO)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |name| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |bv| (CAR |ISTMP#2|)) (SETQ |body| (CDR |ISTMP#2|)) #0#)))))) (LIST |name| (CONS (QUOTE LAMBDA) (CONS |bv| |body|)))) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE EVAL-WHEN)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |ISTMP#3| (CAR |ISTMP#2|)) (AND (CONSP |ISTMP#3|) (EQ (CAR |ISTMP#3|) (QUOTE SETQ)) (PROGN (SETQ |ISTMP#4| (CDR |ISTMP#3|)) (AND (CONSP |ISTMP#4|) (PROGN (SETQ |id| (CAR |ISTMP#4|)) (SETQ |ISTMP#5| (CDR |ISTMP#4|)) (AND (CONSP |ISTMP#5|) (EQ (CDR |ISTMP#5|) NIL) (PROGN (SETQ |exp| (CAR |ISTMP#5|)) #0#)))))))))))) (LIST |id| |exp|)) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE SETQ)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |id| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (EQ (CDR |ISTMP#2|) NIL) (PROGN (SETQ |exp| (CAR |ISTMP#2|)) #0#)))))) (LIST |id| |exp|)) (#1=(QUOTE T) (LIST (QUOTE TOP-LEVEL) |x|)))) (SETQ |nee| (CAR |LETTMP#1|)) (SETQ |niens| (CADR |LETTMP#1|)) (COND ((GETHASH |nee| |$bootDefined|) (SETQ |$bootDefinedTwice| (COND ((EQ |nee| (QUOTE TOP-LEVEL)) |$bootDefinedTwice|) (#1# (CONS |nee| |$bootDefinedTwice|))))) ((QUOTE T) (HPUT |$bootDefined| |nee| T))) (|defuse1| |e| |niens|) ((LAMBDA (|bfVar#10| |i|) (LOOP (COND ((OR (ATOM |bfVar#10|) (PROGN (SETQ |i| (CAR |bfVar#10|)) NIL)) (RETURN NIL)) ((QUOTE T) (HPUT |$bootUsed| |i| (CONS |nee| (GETHASH |i| |$bootUsed|))))) (SETQ |bfVar#10| (CDR |bfVar#10|)))) |$used| NIL)))))
(DEFUN |defuse1| (|e| |y|) (PROG (|ndol| |dol| |LETTMP#1| |b| |a| |ISTMP#1|) (DECLARE (SPECIAL |$bootDefined| |$used|)) (RETURN (COND ((ATOM |y|) (COND ((IDENTP |y|) (SETQ |$used| (COND ((MEMQ |y| |e|) |$used|) ((MEMQ |y| |$used|) |$used|) ((|defusebuiltin| |y|) |$used|) (#0=(QUOTE T) (UNION (LIST |y|) |$used|))))) (#0# NIL))) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE LAMBDA)) (PROGN (SETQ |ISTMP#1| (CDR |y|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (SETQ |b| (CDR |ISTMP#1|)) #1=(QUOTE T))))) (|defuse1| (APPEND (|unfluidlist| |a|) |e|) |b|)) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE PROG)) (PROGN (SETQ |ISTMP#1| (CDR |y|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |a| (CAR |ISTMP#1|)) (SETQ |b| (CDR |ISTMP#1|)) #1#)))) (PROGN (SETQ |LETTMP#1| (|defSeparate| |a|)) (SETQ |dol| (CAR |LETTMP#1|)) (SETQ |ndol| (CADR |LETTMP#1|)) ((LAMBDA (|bfVar#11| |i|) (LOOP (COND ((OR (ATOM |bfVar#11|) (PROGN (SETQ |i| (CAR |bfVar#11|)) NIL)) (RETURN NIL)) (#2=(QUOTE T) (HPUT |$bootDefined| |i| T))) (SETQ |bfVar#11| (CDR |bfVar#11|)))) |dol| NIL) (|defuse1| (APPEND |ndol| |e|) |b|))) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE QUOTE)) (PROGN (SETQ |a| (CDR |y|)) #1#)) NIL) ((AND (CONSP |y|) (EQ (CAR |y|) (QUOTE +LINE)) (PROGN (SETQ |a| (CDR |y|)) #1#)) NIL) (#0# ((LAMBDA (|bfVar#12| |i|) (LOOP (COND ((OR (ATOM |bfVar#12|) (PROGN (SETQ |i| (CAR |bfVar#12|)) NIL)) (RETURN NIL)) (#2# (|defuse1| |e| |i|))) (SETQ |bfVar#12| (CDR |bfVar#12|)))) |y| NIL))))))
(DEFUN |defSeparate| (|x|) (PROG (|x2| |x1| |LETTMP#1| |f|) (RETURN (COND ((NULL |x|) (LIST NIL NIL)) (#0=(QUOTE T) (SETQ |f| (CAR |x|)) (SETQ |LETTMP#1| (|defSeparate| (CDR |x|))) (SETQ |x1| (CAR |LETTMP#1|)) (SETQ |x2| (CADR |LETTMP#1|)) (COND ((|bfBeginsDollar| |f|) (LIST (CONS |f| |x1|) |x2|)) (#0# (LIST |x1| (CONS |f| |x2|)))))))))
(DEFUN |unfluidlist| (|x|) (PROG (|y| |ISTMP#1|) (RETURN (COND ((NULL |x|) NIL) ((ATOM |x|) (LIST |x|)) ((AND (CONSP |x|) (EQ (CAR |x|) (QUOTE &REST)) (PROGN (SETQ |ISTMP#1| (CDR |x|)) (AND (CONSP |ISTMP#1|) (EQ (CDR |ISTMP#1|) NIL) (PROGN (SETQ |y| (CAR |ISTMP#1|)) (QUOTE T))))) (LIST |y|)) ((QUOTE T) (CONS (CAR |x|) (|unfluidlist| (CDR |x|))))))))
(DEFUN |defusebuiltin| (|x|) (PROG NIL (DECLARE (SPECIAL |$lispWordTable|)) (RETURN (GETHASH |x| |$lispWordTable|))))
(DEFUN |bootOut| (|l| |outfn|) (PROG NIL (RETURN ((LAMBDA (|bfVar#13| |i|) (LOOP (COND ((OR (ATOM |bfVar#13|) (PROGN (SETQ |i| (CAR |bfVar#13|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeFileLine| (CONCAT "   " (PNAME |i|)) |outfn|))) (SETQ |bfVar#13| (CDR |bfVar#13|)))) |l| NIL))))
(DEFUN CLESSP (|s1| |s2|) (PROG NIL (RETURN (NULL (SHOEGREATERP |s1| |s2|)))))
(DEFUN SSORT (|l|) (PROG NIL (RETURN (SORT |l| (FUNCTION CLESSP)))))
(DEFUN |bootOutLines| (|l| |outfn| |s|) (PROG (|a|) (RETURN (COND ((NULL |l|) (|shoeFileLine| |s| |outfn|)) (#0=(QUOTE T) (SETQ |a| (PNAME (CAR |l|))) (COND ((< 70 (+ (LENGTH |s|) (LENGTH |a|))) (|shoeFileLine| |s| |outfn|) (|bootOutLines| |l| |outfn| " ")) (#0# (|bootOutLines| (CDR |l|) |outfn| (CONCAT |s| " " |a|)))))))))
(DEFUN XREF (|fn|) (PROG (|infn|) (RETURN (PROGN (SETQ |infn| (CONCAT |fn| ".boot")) (|shoeOpenInputFile| |a| |infn| (|shoeXref| |a| |fn|))))))
(DEFUN |shoeXref| (|a| |fn|) (PROG (|$bfClamming| |$GenVarCounter| |$bootUsed| |$bootDefined| |$lispWordTable| |out|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter| |$bootUsed| |$bootDefined| |$lispWordTable|)) (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|)) ((QUOTE T) (SETQ |$lispWordTable| (MAKE-HASHTABLE (QUOTE EQ))) (DO-SYMBOLS (|i| (FIND-PACKAGE (QUOTE LISP))) (HPUT |$lispWordTable| |i| T)) (SETQ |$bootDefined| (MAKE-HASHTABLE (QUOTE EQ))) (SETQ |$bootUsed| (MAKE-HASHTABLE (QUOTE EQ))) (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (|shoeDefUse| (|shoeTransformStream| |a|)) (SETQ |out| (CONCAT |fn| ".xref")) (|shoeOpenOutputFile| |stream| |out| (|shoeXReport| |stream|)) (|shoeConsole| (CONCAT |out| " PRODUCED")))))))
(DEFUN |shoeXReport| (|stream|) (PROG (|a| |c|) (DECLARE (SPECIAL |$bootUsed|)) (RETURN (PROGN (|shoeFileLine| "USED and where DEFINED" |stream|) (SETQ |c| (SSORT (HKEYS |$bootUsed|))) ((LAMBDA (|bfVar#14| |i|) (LOOP (COND ((OR (ATOM |bfVar#14|) (PROGN (SETQ |i| (CAR |bfVar#14|)) NIL)) (RETURN NIL)) ((QUOTE T) (PROGN (SETQ |a| (CONCAT (PNAME |i|) " is used in ")) (|bootOutLines| (SSORT (GETHASH |i| |$bootUsed|)) |stream| |a|)))) (SETQ |bfVar#14| (CDR |bfVar#14|)))) |c| NIL)))))
(DEFUN FBO (|name| |fn|) (PROG NIL (RETURN (|shoeGeneralFC| (FUNCTION BO) |name| |fn|))))
(DEFUN FEV (|name| |fn|) (PROG NIL (RETURN (|shoeGeneralFC| (FUNCTION EVAL-BOOT-FILE) |name| |fn|))))
(DEFUN |shoeGeneralFC| (|f| |name| |fn|) (PROG (|$GenVarCounter| |$bfClamming| |filename| |a| |infn|) (DECLARE (SPECIAL |$GenVarCounter| |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| NIL) (SETQ |$GenVarCounter| 0) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (SETQ |a| (|shoeOpenInputFile| |a| |infn| (|shoeFindName2| |fn| |name| |a|))) (SETQ |filename| (COND ((< 8 (LENGTH |name|)) (SUBSTRING |name| 0 8)) ((QUOTE T) |name|))) (COND (|a| (FUNCALL |f| (CONCAT "/tmp/" |filename|))) ((QUOTE T) NIL))))))
(DEFUN |shoeFindName2| (|fn| |name| |a|) (PROG (|filename| |lines|) (RETURN (PROGN (SETQ |lines| (|shoeFindLines| |fn| |name| |a|)) (COND (|lines| (PROGN (SETQ |filename| (COND ((< 8 (LENGTH |name|)) (SUBSTRING |name| 0 8)) ((QUOTE T) |name|))) (SETQ |filename| (CONCAT "/tmp/" |filename| ".boot")) (|shoeOpenOutputFile| |stream| |filename| ((LAMBDA (|bfVar#15| |line|) (LOOP (COND ((OR (ATOM |bfVar#15|) (PROGN (SETQ |line| (CAR |bfVar#15|)) NIL)) (RETURN NIL)) ((QUOTE T) (|shoeFileLine| |line| |stream|))) (SETQ |bfVar#15| (CDR |bfVar#15|)))) |lines| NIL)) T)) ((QUOTE T) NIL))))))
(DEFUN |shoeTransform2| (|str|) (PROG NIL (RETURN (|bNext| (FUNCTION |shoeItem|) (|streamTake| 1 (|bNext| (FUNCTION |shoePileInsert|) (|bNext| (FUNCTION |shoeLineToks|) |str|)))))))
(DEFUN |shoeItem| (|str|) (PROG (|dq|) (RETURN (PROGN (SETQ |dq| (CAR |str|)) (CONS (LIST ((LAMBDA (|bfVar#17| |bfVar#16| |line|) (LOOP (COND ((OR (ATOM |bfVar#16|) (PROGN (SETQ |line| (CAR |bfVar#16|)) NIL)) (RETURN (NREVERSE |bfVar#17|))) ((QUOTE T) (SETQ |bfVar#17| (CONS (CAR |line|) |bfVar#17|)))) (SETQ |bfVar#16| (CDR |bfVar#16|)))) NIL (|shoeDQlines| |dq|) NIL)) (CDR |str|))))))
(DEFUN |shoeFindLines| (|fn| |name| |a|) (PROG (|b| |lines| |LETTMP#1|) (RETURN (COND ((NULL |a|) (|shoeNotFound| |fn|) NIL) (#0=(QUOTE T) (SETQ |LETTMP#1| (|shoePackageStartsAt| NIL (LENGTH |name|) |name| (|shoeInclude| (|bAddLineNumber| (|bRgen| |a|) (|bIgen| 0))))) (SETQ |lines| (CAR |LETTMP#1|)) (SETQ |b| (CADR |LETTMP#1|)) (SETQ |b| (|shoeTransform2| |b|)) (COND ((|bStreamNull| |b|) (|shoeConsole| (CONCAT |name| " not found in " |fn|)) NIL) (#0# (COND ((NULL |lines|) (|shoeConsole| ")package not found"))) (APPEND (REVERSE |lines|) (CAR |b|)))))))))
(DEFUN |shoePackageStartsAt| (|lines| |sz| |name| |stream|) (PROG (|a|) (RETURN (COND ((|bStreamNull| |stream|) (LIST NIL (LIST (QUOTE |nullstream|)))) ((QUOTE T) (PROGN (SETQ |a| (CAAR |stream|)) (COND ((AND (NOT (< (LENGTH |a|) 8)) (EQUAL (SUBSTRING |a| 0 8) ")package")) (|shoePackageStartsAt| (CONS (CAAR |stream|) |lines|) |sz| |name| (CDR |stream|))) ((< (LENGTH |a|) |sz|) (|shoePackageStartsAt| |lines| |sz| |name| (CDR |stream|))) ((AND (EQUAL (SUBSTRING |a| 0 |sz|) |name|) (< |sz| (LENGTH |a|)) (NULL (|shoeIdChar| (ELT |a| |sz|)))) (LIST |lines| |stream|)) ((QUOTE T) (|shoePackageStartsAt| |lines| |sz| |name| (CDR |stream|))))))))))
(DEFUN |stripm| (|x| |pk| |bt|) (PROG NIL (RETURN (COND ((ATOM |x|) (COND ((IDENTP |x|) (COND ((EQUAL (SYMBOL-PACKAGE |x|) |bt|) (INTERN (PNAME |x|) |pk|)) (#0=(QUOTE T) |x|))) (#0# |x|))) (#0# (CONS (|stripm| (CAR |x|) |pk| |bt|) (|stripm| (CDR |x|) |pk| |bt|)))))))
(DEFUN |shoePCompile| (|fn|) (PROG (|body| |bv| |ISTMP#2| |name| |ISTMP#1|) (RETURN (PROGN (SETQ |fn| (|stripm| |fn| *PACKAGE* (FIND-PACKAGE "BOOTTRAN"))) (COND ((AND (CONSP |fn|) (EQ (CAR |fn|) (QUOTE DEFUN)) (PROGN (SETQ |ISTMP#1| (CDR |fn|)) (AND (CONSP |ISTMP#1|) (PROGN (SETQ |name| (CAR |ISTMP#1|)) (SETQ |ISTMP#2| (CDR |ISTMP#1|)) (AND (CONSP |ISTMP#2|) (PROGN (SETQ |bv| (CAR |ISTMP#2|)) (SETQ |body| (CDR |ISTMP#2|)) (QUOTE T))))))) (COMPILE |name| (CONS (QUOTE LAMBDA) (CONS |bv| |body|)))) ((QUOTE T) (EVAL |fn|)))))))
(DEFUN FC (|name| |fn|) (PROG (|$GenVarCounter| |$bfClamming| |infn|) (DECLARE (SPECIAL |$GenVarCounter| |$bfClamming|)) (RETURN (PROGN (SETQ |$bfClamming| NIL) (SETQ |$GenVarCounter| 0) (SETQ |infn| (|shoeAddbootIfNec| |fn|)) (|shoeOpenInputFile| |a| |infn| (|shoeFindName| |fn| |name| |a|))))))
(DEFUN |shoeFindName| (|fn| |name| |a|) (PROG (|lines|) (RETURN (PROGN (SETQ |lines| (|shoeFindLines| |fn| |name| |a|)) (|shoePCompileTrees| (|shoeTransformString| |lines|))))))
(DEFUN |shoePCompileTrees| (|s|) (PROG NIL (RETURN ((LAMBDA NIL (LOOP (COND ((|bStreamPackageNull| |s|) (RETURN NIL)) ((QUOTE T) (PROGN (REALLYPRETTYPRINT (|shoePCompile| (CAR |s|))) (SETQ |s| (CDR |s|)))))))))))
(DEFUN |bStreamPackageNull| (|s|) (PROG (|b| |a|) (RETURN (PROGN (SETQ |a|  *PACKAGE*) (IN-PACKAGE (QUOTE BOOTTRAN)) (SETQ |b| (|bStreamNull| |s|)) (setq *package* |a|) |b|))))
(DEFUN PSTTOMC (|string|) (PROG (|$bfClamming| |$GenVarCounter|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (|shoePCompileTrees| (|shoeTransformString| |string|))))))
(DEFUN BOOTLOOP NIL (PROG (|stream| |b| |a|) (RETURN (PROGN (SETQ |a| (READ-LINE)) (COND ((EQL (LENGTH |a|) 0) (PROGN (WRITE-LINE "Boot Loop; to exit type ] ") (BOOTLOOP))) (#0=(QUOTE T) (PROGN (SETQ |b| (|shoePrefix?| ")console" |a|)) (COND (|b| (PROGN (SETQ |stream| *TERMINAL-IO*) (PSTTOMC (|bRgen| |stream|)) (BOOTLOOP))) ((EQUAL (ELT |a| 0) (ELT "]" 0)) NIL) (#0# (PROGN (PSTTOMC (LIST |a|)) (BOOTLOOP)))))))))))
(DEFUN BOOTPO NIL (PROG (|stream| |b| |a|) (RETURN (PROGN (SETQ |a| (READ-LINE)) (COND ((EQL (LENGTH |a|) 0) (PROGN (WRITE-LINE "Boot Loop; to exit type ] ") (BOOTPO))) (#0=(QUOTE T) (PROGN (SETQ |b| (|shoePrefix?| ")console" |a|)) (COND (|b| (PROGN (SETQ |stream| *TERMINAL-IO*) (PSTOUT (|bRgen| |stream|)) (BOOTPO))) ((EQUAL (ELT |a| 0) (ELT "]" 0)) NIL) (#0# (PROGN (PSTOUT (LIST |a|)) (BOOTPO)))))))))))
(DEFUN PSTOUT (|string|) (PROG (|$bfClamming| |$GenVarCounter|) (DECLARE (SPECIAL |$bfClamming| |$GenVarCounter|)) (RETURN (PROGN (SETQ |$GenVarCounter| 0) (SETQ |$bfClamming| NIL) (|shoeConsoleTrees| (|shoeTransformString| |string|))))))
